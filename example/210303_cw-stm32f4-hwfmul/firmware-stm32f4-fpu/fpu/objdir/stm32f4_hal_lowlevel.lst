   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4_hal_lowlevel.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CRYP_SetKey,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	CRYP_SetKey:
  25              	.LFB137:
  26              		.file 1 ".././hal/stm32f4/stm32f4_hal_lowlevel.c"
   1:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /* This file combines several STM32F4 HAL Functions into one file. This was done
   2:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****    for space reasons, to avoid having several MB of HAL functions that most people
   3:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****    will not use. In addition this HAL is slightly less demanding (no interrupts),
   4:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****    but less robust as doesn't implement the timeouts.
   5:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****    
   6:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****    The original HAL files are COPYRIGHT STMicroelectronics, as shown below:
   7:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** */
   8:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
   9:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /*
  10:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
  11:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *
  12:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * Redistribution and use in source and binary forms, with or without modification,
  13:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * are permitted provided that the following conditions are met:
  14:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  15:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *      this list of conditions and the following disclaimer.
  16:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  17:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *      this list of conditions and the following disclaimer in the documentation
  18:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *      and/or other materials provided with the distribution.
  19:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  20:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *      may be used to endorse or promote products derived from this software
  21:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *      without specific prior written permission.
  22:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *
  23:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  25:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  27:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  28:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  29:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  30:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  31:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  32:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *
  34:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ******************************************************************************
  35:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** */ 
  36:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
  37:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
  38:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #include "stm32f4_hal.h"
  39:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #include "stm32f4_hal_lowlevel.h"
  40:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #include "stm32f4xx_hal_rcc.h"
  41:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #include "stm32f4xx_hal_gpio.h"
  42:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #include "stm32f4xx_hal_dma.h"
  43:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #include "stm32f4xx_hal_uart.h"
  44:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #include "stm32f4xx_hal_flash.h"
  45:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #include "stm32f4xx_hal_cryp.h"
  46:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
  47:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #define assert_param(expr) ((void)0U)
  48:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
  49:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #define CLOCKSWITCH_TIMEOUT_VALUE  5000U /* 5 s */
  50:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
  51:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
  52:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** uint32_t HAL_GetTick(void)
  53:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
  54:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 	static uint32_t tick;
  55:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 	return tick++;;
  56:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
  57:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
  58:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
  59:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
  60:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
  61:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         is disabled and the application software has to enable this clock before 
  62:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         using it. 
  63:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
  64:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *          This parameter can be any combination of the following values:
  65:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
  66:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
  67:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
  68:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
  69:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
  70:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  NewState: new state of the specified peripheral clock.
  71:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *          This parameter can be: ENABLE or DISABLE.
  72:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval None
  73:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
  74:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
  75:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
  76:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
  77:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  78:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  79:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
  80:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if (NewState != DISABLE)
  81:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
  82:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
  83:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
  84:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   else
  85:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
  86:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
  87:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
  88:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
  89:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
  90:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
  91:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
  92:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         RCC_OscInitTypeDef.
  93:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
  94:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         contains the configuration information for the RCC Oscillators.
  95:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   The PLL is not disabled when used as system clock.
  96:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
  97:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         supported by this API. User should request a transition to LSE Off
  98:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         first and then LSE On or LSE Bypass.
  99:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 100:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         supported by this API. User should request a transition to HSE Off
 101:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         first and then HSE On or HSE Bypass.
 102:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval HAL status
 103:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
 104:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 105:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 106:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 107:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 108:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
 109:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 110:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*------------------------------- HSE Configuration ------------------------*/
 111:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 112:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 113:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the parameters */
 114:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 115:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not dis
 116:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 117:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 118:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 119:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 120:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 121:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         return HAL_ERROR;
 122:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 123:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 124:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else
 125:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 126:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Set the new HSE configuration ---------------------------------------*/
 127:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 128:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 129:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Check the HSE State */
 130:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 131:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 132:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Get Start Tick*/
 133:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 134:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 135:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Wait till HSE is ready */
 136:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 137:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 138:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 139:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 140:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****             return HAL_TIMEOUT;
 141:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           }
 142:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 143:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 144:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       else
 145:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 146:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Get Start Tick*/
 147:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 148:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 149:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Wait till HSE is bypassed or disabled */
 150:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 151:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 152:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 153:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 154:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****             return HAL_TIMEOUT;
 155:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           }
 156:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 157:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 158:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 159:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 160:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*----------------------------- HSI Configuration --------------------------*/
 161:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 162:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 163:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the parameters */
 164:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 165:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 166:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 167:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 168:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 169:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 170:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 171:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* When HSI is used as system clock it will not disabled */
 172:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 173:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 174:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         return HAL_ERROR;
 175:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 176:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Otherwise, just the calibration is allowed */
 177:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       else
 178:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 179:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 180:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 181:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 182:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 183:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else
 184:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 185:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Check the HSI State */
 186:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 187:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 188:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 189:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         __HAL_RCC_HSI_ENABLE();
 190:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 191:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Get Start Tick*/
 192:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 193:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 194:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Wait till HSI is ready */
 195:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 196:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 197:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 198:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 199:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****             return HAL_TIMEOUT;
 200:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           }
 201:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 202:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 203:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 204:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 205:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 206:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       else
 207:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 208:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 209:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         __HAL_RCC_HSI_DISABLE();
 210:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 211:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Get Start Tick*/
 212:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 213:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 214:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Wait till HSI is ready */
 215:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 216:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 217:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 218:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 219:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****             return HAL_TIMEOUT;
 220:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           }
 221:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 222:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 223:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 224:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 225:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*------------------------------ LSI Configuration -------------------------*/
 226:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 227:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 228:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the parameters */
 229:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 230:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 231:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the LSI State */
 232:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 233:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 234:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 235:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       __HAL_RCC_LSI_ENABLE();
 236:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 237:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Get Start Tick*/
 238:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 239:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 240:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Wait till LSI is ready */
 241:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 242:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 243:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 244:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 245:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
 246:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 247:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 248:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 249:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else
 250:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 251:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 252:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       __HAL_RCC_LSI_DISABLE();
 253:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 254:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Get Start Tick*/
 255:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 256:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 257:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Wait till LSI is ready */
 258:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 259:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 260:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 261:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 262:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
 263:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 264:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 265:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 266:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 267:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*------------------------------ LSE Configuration -------------------------*/
 268:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 269:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 270:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the parameters */
 271:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 272:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 273:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Enable Power Clock*/
 274:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 275:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 276:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Enable write access to Backup domain */
 277:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     PWR->CR |= PWR_CR_DBP;
 278:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 279:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Wait for Backup domain Write protection enable */
 280:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 281:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 282:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
 283:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 284:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 285:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 286:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         return HAL_TIMEOUT;
 287:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 288:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 289:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 290:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Set the new LSE configuration -----------------------------------------*/
 291:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 292:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the LSE State */
 293:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 294:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 295:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Get Start Tick*/
 296:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 297:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 298:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Wait till LSE is ready */
 299:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 300:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 301:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 302:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 303:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
 304:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 305:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 306:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 307:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else
 308:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 309:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Get Start Tick*/
 310:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 311:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 312:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Wait till LSE is ready */
 313:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 314:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 315:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 316:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 317:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
 318:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 319:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 320:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 321:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 322:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 323:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
 324:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 325:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 326:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 327:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check if the PLL is used as system clock or not */
 328:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 329:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 330:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 331:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 332:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Check the parameters */
 333:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 334:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 335:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 336:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 337:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 338:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 339:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Disable the main PLL. */
 340:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         __HAL_RCC_PLL_DISABLE();
 341:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 342:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Get Start Tick*/
 343:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 344:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 345:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Wait till PLL is ready */
 346:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 347:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 348:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 349:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 350:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****             return HAL_TIMEOUT;
 351:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           }
 352:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 353:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 354:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 355:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                  
 356:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                  RCC_OscInitStruct->PLL.PLLM                                       
 357:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                  (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))   
 358:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                  (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PL
 359:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                  (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
 360:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Enable the main PLL. */
 361:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         __HAL_RCC_PLL_ENABLE();
 362:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 363:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Get Start Tick*/
 364:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 365:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 366:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Wait till PLL is ready */
 367:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 368:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 369:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 370:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 371:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****             return HAL_TIMEOUT;
 372:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           }
 373:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 374:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 375:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       else
 376:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 377:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Disable the main PLL. */
 378:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         __HAL_RCC_PLL_DISABLE();
 379:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 380:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Get Start Tick*/
 381:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 382:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 383:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Wait till PLL is ready */
 384:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 385:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 386:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 387:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 388:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****             return HAL_TIMEOUT;
 389:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           }
 390:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 391:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 392:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 393:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else
 394:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 395:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       return HAL_ERROR;
 396:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 397:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 398:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 399:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 400:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 401:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
 402:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified
 403:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         parameters in the RCC_ClkInitStruct.
 404:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_OscInitTypeDef structure that
 405:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         contains the configuration information for the RCC peripheral.
 406:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  FLatency: FLASH Latency, this parameter depend on device selected
 407:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *
 408:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 409:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 410:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *
 411:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 412:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 413:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         of failure of the HSE used directly or indirectly as system clock
 414:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         (if the Clock Security System CSS is enabled).
 415:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *
 416:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   A switch from one clock source to another occurs only if the target
 417:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         clock source is ready (clock stable after startup delay or PLL locked).
 418:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         If a clock source which is not yet ready is selected, the switch will
 419:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         occur when the clock source will be ready.
 420:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *
 421:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 422:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 423:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 424:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval None
 425:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
 426:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 427:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 428:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 429:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 430:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
 431:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 432:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 433:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 434:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
 435:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     must be correctly programmed according to the frequency of the CPU clock
 436:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     (HCLK) and the supply voltage of the device. */
 437:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 438:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 439:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 440:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 441:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 442:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 443:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 444:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 445:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     memory by reading the FLASH_ACR register */
 446:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 447:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 448:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       return HAL_ERROR;
 449:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 450:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 451:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 452:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 453:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 454:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 455:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 456:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 457:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 458:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 459:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/
 460:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 461:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 462:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 463:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 464:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* HSE is selected as System Clock Source */
 465:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 466:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 467:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Check the HSE ready flag */
 468:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 469:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 470:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         return HAL_ERROR;
 471:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 472:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 473:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* PLL is selected as System Clock Source */
 474:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 475:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 476:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 477:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Check the PLL ready flag */
 478:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 479:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 480:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         return HAL_ERROR;
 481:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 482:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 483:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* HSI is selected as System Clock Source */
 484:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else
 485:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 486:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Check the HSI ready flag */
 487:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 488:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 489:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         return HAL_ERROR;
 490:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 491:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 492:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 493:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 494:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Get Start Tick*/
 495:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 496:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 497:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 498:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 499:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 500:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 501:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 502:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 503:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
 504:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 505:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 506:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 507:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 508:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 509:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 510:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 511:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 512:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 513:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
 514:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 515:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 516:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 517:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 518:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 519:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 520:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 521:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 522:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 523:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
 524:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 525:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 526:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 527:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else
 528:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 529:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 530:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 531:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 532:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 533:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
 534:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 535:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 536:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 537:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 538:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 539:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 540:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 541:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 542:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****      /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 543:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 544:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 545:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 546:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     memory by reading the FLASH_ACR register */
 547:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 548:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 549:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       return HAL_ERROR;
 550:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 551:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****  }
 552:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 553:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/
 554:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 555:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 556:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 557:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 558:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 559:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 560:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/
 561:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 562:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 563:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 564:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 565:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 566:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 567:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Update the SystemCoreClock global variable */
 568:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSI
 569:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 570:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Configure the source of time base considering new system clocks settings*/
 571:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //HAL_InitTick (TICK_INT_PRIORITY);
 572:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 573:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 574:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 575:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 576:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
 577:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Returns the PCLK1 frequency
 578:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
 579:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
 580:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval PCLK1 frequency
 581:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
 582:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
 583:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 584:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
 585:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_
 586:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return 7372800;
 587:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 588:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 589:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
 590:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Returns the PCLK2 frequency
 591:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
 592:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
 593:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval PCLK2 frequency
 594:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
 595:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
 596:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 597:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 598:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_C
 599:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return 7372800;
 600:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 601:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 602:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 603:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 604:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #define GPIO_MODE             0x00000003U
 605:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #define EXTI_MODE             0x10000000U
 606:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #define GPIO_MODE_IT          0x00010000U
 607:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #define GPIO_MODE_EVT         0x00020000U
 608:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #define RISING_EDGE           0x00100000U
 609:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #define FALLING_EDGE          0x00200000U
 610:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #define GPIO_OUTPUT_TYPE      0x00000010U
 611:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 612:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #define GPIO_NUMBER           16U
 613:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 614:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
 615:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Initializes the GPIOx peripheral according to the specified parameters in the GPIO_Init
 616:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F429X device or
 617:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427
 618:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 619:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         the configuration information for the specified GPIO peripheral.
 620:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval None
 621:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
 622:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
 623:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 624:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t position;
 625:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t ioposition = 0x00U;
 626:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t iocurrent = 0x00U;
 627:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t temp = 0x00U;
 628:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 629:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
 630:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 631:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 632:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 633:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 634:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 635:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Configure the port pins */
 636:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   for(position = 0U; position < GPIO_NUMBER; position++)
 637:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 638:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Get the IO position */
 639:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ioposition = 0x01U << position;
 640:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Get the current IO position */
 641:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 642:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 643:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if(iocurrent == ioposition)
 644:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 645:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /*--------------------- GPIO Mode Configuration ------------------------*/
 646:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* In case of Alternate function mode selection */
 647:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 648:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 649:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Check the Alternate function parameter */
 650:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 651:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Configure Alternate function mapped with the current IO */
 652:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp = GPIOx->AFR[position >> 3U];
 653:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 654:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 655:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         GPIOx->AFR[position >> 3U] = temp;
 656:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 657:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 658:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
 659:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp = GPIOx->MODER;
 660:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 661:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 662:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       GPIOx->MODER = temp;
 663:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 664:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* In case of Output or Alternate function mode selection */
 665:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 666:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 667:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 668:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Check the Speed parameter */
 669:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 670:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Configure the IO Speed */
 671:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp = GPIOx->OSPEEDR;
 672:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 673:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= (GPIO_Init->Speed << (position * 2U));
 674:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         GPIOx->OSPEEDR = temp;
 675:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 676:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Configure the IO Output Type */
 677:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp = GPIOx->OTYPER;
 678:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 679:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 680:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         GPIOx->OTYPER = temp;
 681:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 682:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 683:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Activate the Pull-up or Pull down resistor for the current IO */
 684:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp = GPIOx->PUPDR;
 685:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 686:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp |= ((GPIO_Init->Pull) << (position * 2U));
 687:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       GPIOx->PUPDR = temp;
 688:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 689:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /*--------------------- EXTI Mode Configuration ------------------------*/
 690:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Configure the External Interrupt or event for the current IO */
 691:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 692:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 693:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Enable SYSCFG Clock */
 694:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         __HAL_RCC_SYSCFG_CLK_ENABLE();
 695:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 696:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp = SYSCFG->EXTICR[position >> 2U];
 697:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~(0x0FU << (4U * (position & 0x03U)));
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 699:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 700:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 701:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Clear EXTI line configuration */
 702:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp = EXTI->IMR;
 703:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 704:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 705:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 706:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           temp |= iocurrent;
 707:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 708:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         EXTI->IMR = temp;
 709:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 710:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp = EXTI->EMR;
 711:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 712:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 713:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 714:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           temp |= iocurrent;
 715:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 716:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         EXTI->EMR = temp;
 717:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 718:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         /* Clear Rising Falling edge configuration */
 719:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp = EXTI->RTSR;
 720:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 721:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 722:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 723:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           temp |= iocurrent;
 724:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 725:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         EXTI->RTSR = temp;
 726:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 727:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp = EXTI->FTSR;
 728:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 729:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 730:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 731:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           temp |= iocurrent;
 732:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 733:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         EXTI->FTSR = temp;
 734:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 735:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 736:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 737:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 738:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 739:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
 740:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Sets or clears the selected data port bit.
 741:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *
 742:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @note   This function uses GPIOx_BSRR register to allow atomic read/modify
 743:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         accesses. In this way, there is no risk of an IRQ occurring between
 744:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         the read and the modify access.
 745:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *
 746:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral for STM32F429X device or
 747:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427
 748:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  GPIO_Pin: specifies the port bit to be written.
 749:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
 750:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  PinState: specifies the value to be written to the selected bit.
 751:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *          This parameter can be one of the GPIO_PinState enum values:
 752:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *            @arg GPIO_PIN_RESET: to clear the port pin
 753:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *            @arg GPIO_PIN_SET: to set the port pin
 754:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval None
 755:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
 756:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 757:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 758:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
 759:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 760:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN_ACTION(PinState));
 761:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 762:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(PinState != GPIO_PIN_RESET)
 763:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 764:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     GPIOx->BSRR = GPIO_Pin;
 765:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 766:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   else
 767:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 768:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 769:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 770:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 771:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 772:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 773:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
 774:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Configures the UART peripheral.
 775:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 776:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *                the configuration information for the specified UART module.
 777:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval None
 778:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
 779:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
 780:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 781:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t tmpreg = 0x00U;
 782:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 783:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
 784:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 785:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 786:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
 787:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
 788:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 789:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
 790:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   tmpreg = huart->Instance->CR2;
 791:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 792:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Clear STOP[13:12] bits */
 793:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 794:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 795:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
 796:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   tmpreg |= (uint32_t)huart->Init.StopBits;
 797:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 798:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Write to USART CR2 */
 799:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 801:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
 802:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   tmpreg = huart->Instance->CR1;
 803:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 804:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Clear M, PCE, PS, TE and RE bits */
 805:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 806:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                    USART_CR1_RE | USART_CR1_OVER8));
 807:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 808:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Configure the UART Word Length, Parity and mode:
 809:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****      Set the M bits according to huart->Init.WordLength value
 810:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****      Set PCE and PS bits according to huart->Init.Parity value
 811:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****      Set TE and RE bits according to huart->Init.Mode value
 812:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
 813:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.
 814:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 815:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Write to USART CR1 */
 816:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 817:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 818:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
 819:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   tmpreg = huart->Instance->CR3;
 820:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 821:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Clear CTSE and RTSE bits */
 822:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 823:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 824:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
 825:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   tmpreg |= huart->Init.HwFlowCtl;
 826:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 827:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Write to USART CR3 */
 828:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 829:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 830:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the Over Sampling */
 831:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 832:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 833:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
 834:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #if defined(USART6)
 835:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if((huart->Instance == USART1) || (huart->Instance == USART6))
 836:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 837:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 838:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 839:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #else
 840:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if(huart->Instance == USART1)
 841:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 842:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 843:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 844:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #endif /* USART6 */
 845:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else
 846:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 847:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 848:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 849:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 850:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   else
 851:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 852:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
 853:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #if defined(USART6)
 854:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if((huart->Instance == USART1) || (huart->Instance == USART6))
 855:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 856:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 857:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 858:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #else
 859:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if(huart->Instance == USART1)
 860:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 861:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 862:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 863:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** #endif /* USART6 */
 864:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     else
 865:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 866:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 867:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 868:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 869:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 870:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 871:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
 872:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 873:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         the UART_InitTypeDef and create the associated handle.
 874:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 875:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *                the configuration information for the specified UART module.
 876:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval HAL status
 877:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
 878:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 879:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 880:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the UART handle allocation */
 881:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(huart == NULL)
 882:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 883:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     return HAL_ERROR;
 884:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 885:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 886:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
 887:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 888:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 889:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 890:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 891:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 892:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 893:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   else
 894:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 895:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 896:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 897:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 898:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 899:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 900:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 901:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 902:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Allocate lock resource and initialize it */
 903:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->Lock = HAL_UNLOCKED;
 904:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Init the low level hardware */
 905:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //HAL_UART_MspInit(huart);
 906:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 907:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 908:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   huart->gState = HAL_UART_STATE_BUSY;
 909:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 910:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Disable the peripheral */
 911:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   __HAL_UART_DISABLE(huart);
 912:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 913:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Set the UART Communication parameters */
 914:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   UART_SetConfig(huart);
 915:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 916:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 917:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 918:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 919:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 920:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 921:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 922:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Enable the peripheral */
 923:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   __HAL_UART_ENABLE(huart);
 924:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 925:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Initialize the UART state */
 926:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 927:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   huart->gState= HAL_UART_STATE_READY;
 928:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   huart->RxState= HAL_UART_STATE_READY;
 929:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 930:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 931:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 932:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 933:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** static HAL_StatusTypeDef UART_WaitOnFlagForever(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatu
 934:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 935:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Wait until flag is set */
 936:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 937:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 938:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 939:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 940:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
 941:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Sends an amount of data in blocking mode.
 942:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 943:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *                the configuration information for the specified UART module.
 944:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  pData: Pointer to data buffer
 945:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Size: Amount of data to be sent
 946:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Timeout: Timeout duration
 947:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval HAL status
 948:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
 949:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
 950:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 951:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint16_t* tmp;
 952:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //uint32_t tickstart = 0U;
 953:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 954:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check that a Tx process is not already ongoing */
 955:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(huart->gState == HAL_UART_STATE_READY)
 956:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 957:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if((pData == NULL ) || (Size == 0))
 958:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 959:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       return  HAL_ERROR;
 960:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 961:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 962:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Process Locked */
 963:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_LOCK(huart);
 964:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 965:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 966:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 967:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 968:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Init tickstart for timeout managment */
 969:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //tickstart = HAL_GetTick();
 970:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 971:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->TxXferSize = Size;
 972:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->TxXferCount = Size;
 973:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     while(huart->TxXferCount > 0U)
 974:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 975:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       huart->TxXferCount--;
 976:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 977:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 978:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 979:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 980:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
 981:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 982:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         tmp = (uint16_t*) pData;
 983:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 984:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 985:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 986:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           pData +=2U;
 987:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 988:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         else
 989:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 990:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           pData +=1U;
 991:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 992:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 993:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       else
 994:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 995:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 996:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 997:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
 998:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 999:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
1000:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
1001:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
1002:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1003:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if(UART_WaitOnFlagForever(huart, UART_FLAG_TC, RESET) != HAL_OK)
1004:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
1005:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       return HAL_TIMEOUT;
1006:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
1007:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1008:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* At end of Tx process, restore huart->gState to Ready */
1009:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       huart->gState = HAL_UART_STATE_READY;
1010:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1011:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Process Unlocked */
1012:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_UNLOCK(huart);
1013:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1014:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     return HAL_OK;
1015:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1016:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   else
1017:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
1018:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     return HAL_BUSY;
1019:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1020:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
1021:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1022:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1023:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1024:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
1025:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Receives an amount of data in blocking mode.
1026:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1027:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *                the configuration information for the specified UART module.
1028:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  pData: Pointer to data buffer
1029:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Size: Amount of data to be received
1030:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Timeout: Timeout duration
1031:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval HAL status
1032:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
1033:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1034:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
1035:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint16_t* tmp;
1036:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //uint32_t tickstart = 0U;
1037:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1038:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check that a Rx process is not already ongoing */
1039:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(huart->RxState == HAL_UART_STATE_READY)
1040:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
1041:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if((pData == NULL ) || (Size == 0))
1042:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
1043:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       return  HAL_ERROR;
1044:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
1045:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1046:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Process Locked */
1047:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_LOCK(huart);
1048:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1049:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1050:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1051:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1052:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Init tickstart for timeout managment */
1053:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //tickstart = HAL_GetTick();
1054:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1055:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->RxXferSize = Size;
1056:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->RxXferCount = Size;
1057:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1058:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the remain data to be received */
1059:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     while(huart->RxXferCount > 0U)
1060:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
1061:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       huart->RxXferCount--;
1062:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
1063:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
1064:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
1065:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
1066:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
1067:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
1068:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         tmp = (uint16_t*) pData;
1069:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
1070:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
1071:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
1072:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           pData +=2U;
1073:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
1074:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         else
1075:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
1076:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
1077:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           pData +=1U;
1078:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
1079:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1080:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
1081:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       else
1082:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
1083:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
1084:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
1085:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
1086:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
1087:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
1088:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
1089:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
1090:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
1091:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         else
1092:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
1093:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
1094:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
1095:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1096:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
1097:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
1098:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1099:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1100:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_READY;
1101:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1102:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Process Unlocked */
1103:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_UNLOCK(huart);
1104:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1105:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     return HAL_OK;
1106:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1107:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   else
1108:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
1109:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     return HAL_BUSY;
1110:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1111:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
1112:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1113:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///// ----- From stm32f4xx_cryp.c ------------------------------------------------
1114:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //#define FLAG_MASK     ((uint8_t)0x20)
1115:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1116:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///**
1117:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @brief  Fills each CRYP_KeyInitStruct member with its default value.
1118:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
1119:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*         which will be initialized.
1120:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @retval None
1121:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*/
1122:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
1123:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //{
1124:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
1125:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_KeyInitStruct->CRYP_Key0Right = 0;
1126:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
1127:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_KeyInitStruct->CRYP_Key1Right = 0;
1128:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
1129:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_KeyInitStruct->CRYP_Key2Right = 0;
1130:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
1131:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_KeyInitStruct->CRYP_Key3Right = 0;
1132:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //}
1133:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1134:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///**
1135:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @brief  Flushes the IN and OUT FIFOs (that is read and write pointers of the 
1136:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*         FIFOs are reset)
1137:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @note   The FIFOs must be flushed only when BUSY flag is reset.  
1138:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  None
1139:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @retval None
1140:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*/
1141:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //void CRYP_FIFOFlush(void)
1142:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //{
1143:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Reset the read and write pointers of the FIFOs */
1144:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->CR |= CRYP_CR_FFLUSH;
1145:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //}
1146:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1147:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///**
1148:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @brief  Initializes the CRYP peripheral according to the specified parameters
1149:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*         in the CRYP_InitStruct.
1150:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
1151:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*         the configuration information for the CRYP peripheral.
1152:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @retval None
1153:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*/
1154:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
1155:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //{
1156:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Check the parameters */
1157:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
1158:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
1159:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));
1160:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1161:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Select Algorithm mode*/  
1162:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->CR &= ~CRYP_CR_ALGOMODE;
1163:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
1164:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1165:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Select dataType */ 
1166:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->CR &= ~CRYP_CR_DATATYPE;
1167:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
1168:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1169:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* select Key size (used only with AES algorithm) */
1170:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
1171:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //(CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
1172:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //(CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
1173:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //(CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
1174:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1175:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
1176:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP->CR &= ~CRYP_CR_KEYSIZE;
1177:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
1178:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                                   //configured once the key has 
1179:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                                   //been prepared */
1180:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1181:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1182:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Select data Direction */ 
1183:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->CR &= ~CRYP_CR_ALGODIR;
1184:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
1185:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //}
1186:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1187:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///**
1188:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @brief  Initializes the CRYP Keys according to the specified parameters in
1189:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*         the CRYP_KeyInitStruct.
1190:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
1191:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*         contains the configuration information for the CRYP Keys.
1192:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @retval None
1193:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*/
1194:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
1195:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //{
1196:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Key Initialisation */
1197:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
1198:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
1199:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
1200:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
1201:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
1202:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
1203:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
1204:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
1205:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //}
1206:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1207:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///**
1208:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @brief  Enables or disables the CRYP peripheral.
1209:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  NewState: new state of the CRYP peripheral.
1210:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*          This parameter can be: ENABLE or DISABLE.
1211:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @retval None
1212:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*/
1213:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //void CRYP_Cmd(FunctionalState NewState)
1214:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //{
1215:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Check the parameters */
1216:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //assert_param(IS_FUNCTIONAL_STATE(NewState));
1217:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1218:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //if (NewState != DISABLE)
1219:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1220:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* Enable the Cryptographic processor */
1221:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP->CR |= CRYP_CR_CRYPEN;
1222:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1223:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //else
1224:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1225:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* Disable the Cryptographic processor */
1226:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP->CR &= ~CRYP_CR_CRYPEN;
1227:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1228:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //}
1229:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1230:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///**
1231:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @brief  Returns whether CRYP peripheral is enabled or disabled.
1232:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  none.
1233:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @retval Current state of the CRYP peripheral (ENABLE or DISABLE).
1234:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*/
1235:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //FunctionalState CRYP_GetCmdStatus(void)
1236:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //{
1237:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //FunctionalState state = DISABLE;
1238:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1239:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //if ((CRYP->CR & CRYP_CR_CRYPEN) != 0)
1240:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1241:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* CRYPEN bit is set */
1242:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //state = ENABLE;
1243:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1244:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //else
1245:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1246:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* CRYPEN bit is reset */
1247:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //state = DISABLE;
1248:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1249:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //return state;
1250:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //}
1251:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1252:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///**
1253:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @brief  Writes data in the Data Input register (DIN).
1254:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @note   After the DIN register has been read once or several times, 
1255:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
1256:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  Data: data to write in Data Input register
1257:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @retval None
1258:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*/
1259:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //void CRYP_DataIn(uint32_t Data)
1260:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //{
1261:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP->DR = Data;
1262:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //}
1263:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1264:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///**
1265:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @brief  Returns the last data entered into the output FIFO.
1266:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  None
1267:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @retval Last data entered into the output FIFO.
1268:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*/
1269:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //uint32_t CRYP_DataOut(void)
1270:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //{
1271:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //return CRYP->DOUT;
1272:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //}
1273:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1274:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///**
1275:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @brief  Checks whether the specified CRYP flag is set or not.
1276:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  CRYP_FLAG: specifies the CRYP flag to check.
1277:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*          This parameter can be one of the following values:
1278:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*            @arg CRYP_FLAG_IFEM: Input FIFO Empty flag.
1279:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*            @arg CRYP_FLAG_IFNF: Input FIFO Not Full flag.
1280:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*            @arg CRYP_FLAG_OFNE: Output FIFO Not Empty flag.
1281:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*            @arg CRYP_FLAG_OFFU: Output FIFO Full flag.
1282:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*            @arg CRYP_FLAG_BUSY: Busy flag.
1283:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
1284:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
1285:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @retval The new state of CRYP_FLAG (SET or RESET).
1286:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*/
1287:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
1288:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //{
1289:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //FlagStatus bitstatus = RESET;
1290:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //uint32_t tempreg = 0;
1291:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1292:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Check the parameters */
1293:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));
1294:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1295:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* check if the FLAG is in RISR register */
1296:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
1297:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1298:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //tempreg = CRYP->RISR;
1299:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1300:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //else  /* The FLAG is in SR register */
1301:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1302:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //tempreg = CRYP->SR;
1303:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1304:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1305:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1306:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Check the status of the specified CRYP flag */
1307:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
1308:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1309:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* CRYP_FLAG is set */
1310:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //bitstatus = SET;
1311:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1312:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //else
1313:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1314:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* CRYP_FLAG is reset */
1315:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //bitstatus = RESET;
1316:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1317:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1318:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Return the CRYP_FLAG status */
1319:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //return  bitstatus;
1320:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //}
1321:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1322:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///// ----- From stm32f4xx_cryp_aes.c --------------------------------------------
1323:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //#define AESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
1324:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1325:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** ///**
1326:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @brief  Encrypt and decrypt using AES in ECB Mode
1327:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  Mode: encryption or decryption Mode.
1328:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*          This parameter can be one of the following values:
1329:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*            @arg MODE_ENCRYPT: Encryption
1330:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*            @arg MODE_DECRYPT: Decryption
1331:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  Key: Key used for AES algorithm.
1332:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  Keysize: length of the Key, must be a 128, 192 or 256.
1333:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  Input: pointer to the Input buffer.
1334:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  Ilength: length of the Input buffer, must be a multiple of 16.
1335:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @param  Output: pointer to the returned buffer.
1336:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //* @retval An ErrorStatus enumeration value:
1337:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*          - SUCCESS: Operation done
1338:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*          - ERROR: Operation failed
1339:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //*/
1340:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
1341:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                          //uint8_t* Input, uint32_t Ilength, uint8_t* Output)
1342:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //{
1343:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_InitTypeDef AES_CRYP_InitStructure;
1344:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
1345:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //__IO uint32_t counter = 0;
1346:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //uint32_t busystatus = 0;
1347:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //ErrorStatus status = SUCCESS;
1348:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //uint32_t keyaddr    = (uint32_t)Key;
1349:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //uint32_t inputaddr  = (uint32_t)Input;
1350:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //uint32_t outputaddr = (uint32_t)Output;
1351:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //uint32_t i = 0;
1352:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1353:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Crypto structures initialisation*/
1354:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
1355:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1356:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //switch(Keysize)
1357:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1358:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //case 128:
1359:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
1360:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
1361:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1362:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
1363:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1364:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
1365:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1366:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
1367:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //break;
1368:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //case 192:
1369:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
1370:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
1371:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1372:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
1373:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1374:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
1375:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1376:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
1377:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1378:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
1379:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1380:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
1381:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //break;
1382:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //case 256:
1383:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
1384:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
1385:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1386:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
1387:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1388:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
1389:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1390:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
1391:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1392:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
1393:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1394:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
1395:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1396:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
1397:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //keyaddr+=4;
1398:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
1399:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //break;
1400:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //default:
1401:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //break;
1402:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1403:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1404:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///*------------------ AES Decryption ------------------*/
1405:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //if(Mode == MODE_DECRYPT) /* AES decryption */
1406:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1407:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* Flush IN/OUT FIFOs */
1408:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP_FIFOFlush();
1409:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1410:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* Crypto Init for Key preparation for decryption process */
1411:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
1412:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
1413:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
1414:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP_Init(&AES_CRYP_InitStructure);
1415:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1416:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* Key Initialisation */
1417:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
1418:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1419:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* Enable Crypto processor */
1420:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP_Cmd(ENABLE);
1421:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1422:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* wait until the Busy flag is RESET */
1423:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //do
1424:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //{
1425:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
1426:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //counter++;
1427:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //}while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
1428:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1429:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //if (busystatus != RESET)
1430:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****    //{
1431:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****        //status = ERROR;
1432:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //}
1433:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //else
1434:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //{
1435:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       ///* Crypto Init for decryption process */  
1436:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
1437:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //}
1438:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1439:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///*------------------ AES Encryption ------------------*/
1440:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //else /* AES encryption */
1441:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1442:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1443:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
1444:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1445:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* Crypto Init for Encryption process */
1446:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
1447:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1448:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1449:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
1450:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
1451:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_Init(&AES_CRYP_InitStructure);
1452:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1453:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Flush IN/OUT FIFOs */
1454:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_FIFOFlush();
1455:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1456:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Enable Crypto processor */
1457:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_Cmd(ENABLE);
1458:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1459:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //if(CRYP_GetCmdStatus() == DISABLE)
1460:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1461:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* The CRYP peripheral clock is not enabled or the device doesn't embed 
1462:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****        //the CRYP peripheral (please check the device sales type. */
1463:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //return(ERROR);
1464:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1465:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1466:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
1467:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //{
1468:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1469:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* Write the Input block in the IN FIFO */
1470:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP_DataIn(*(uint32_t*)(inputaddr));
1471:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //inputaddr+=4;
1472:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP_DataIn(*(uint32_t*)(inputaddr));
1473:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //inputaddr+=4;
1474:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP_DataIn(*(uint32_t*)(inputaddr));
1475:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //inputaddr+=4;
1476:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //CRYP_DataIn(*(uint32_t*)(inputaddr));
1477:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //inputaddr+=4;
1478:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1479:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     ///* Wait until the complete message has been processed */
1480:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //counter = 0;
1481:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //do
1482:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //{
1483:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
1484:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //counter++;
1485:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //}while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
1486:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1487:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //if (busystatus != RESET)
1488:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****    //{
1489:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****        //status = ERROR;
1490:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //}
1491:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //else
1492:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //{
1493:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1494:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       ///* Read the Output block from the Output FIFO */
1495:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //*(uint32_t*)(outputaddr) = CRYP_DataOut();
1496:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //outputaddr+=4;
1497:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //*(uint32_t*)(outputaddr) = CRYP_DataOut();
1498:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //outputaddr+=4;
1499:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //*(uint32_t*)(outputaddr) = CRYP_DataOut();
1500:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //outputaddr+=4;
1501:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //*(uint32_t*)(outputaddr) = CRYP_DataOut(); 
1502:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       //outputaddr+=4;
1503:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //}
1504:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //}
1505:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1506:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   ///* Disable Crypto */
1507:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //CRYP_Cmd(DISABLE);
1508:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1509:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //return status; 
1510:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** //}
1511:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1512:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
1513:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Writes the Key in Key registers. 
1514:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
1515:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         the configuration information for CRYP module
1516:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Key Pointer to Key buffer
1517:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  KeySize Size of Key
1518:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval None
1519:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
1520:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint8_t *Key, uint32_t KeySize)
1521:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
  27              		.loc 1 1521 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1522:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t keyaddr = (uint32_t)Key;
1523:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1524:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   switch(KeySize)
  33              		.loc 1 1524 0
  34 0000 B2F5807F 		cmp	r2, #256
  35 0004 29D0     		beq	.L3
  36 0006 B2F5007F 		cmp	r2, #512
  37 000a 0CD0     		beq	.L4
  38 000c 22BB     		cbnz	r2, .L1
  39              	.LBB89:
  40              	.LBB90:
  41              		.file 2 ".././hal/stm32f4/CMSIS/core/cmsis_gcc.h"
   1:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**************************************************************************//**
   2:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  * @version  V4.30
   5:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  * @date     20. October 2015
   6:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  ******************************************************************************/
   7:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
   9:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    All rights reserved.
  10:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****      specific prior written permission.
  20:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    *
  21:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  34:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  35:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  38:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #endif
  45:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  46:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  47:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   @{
  51:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
  52:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  53:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
  54:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
  58:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
  60:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
  62:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  63:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  64:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
  65:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
  69:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
  71:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
  73:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  74:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  75:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
  76:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Get Control Register
  77:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               Control Register value
  79:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
  80:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
  82:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
  83:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  84:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
  86:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
  87:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  88:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  89:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
  90:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Set Control Register
  91:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
  94:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
  96:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
  98:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
  99:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 100:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 101:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               IPSR Register value
 104:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 105:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 107:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 108:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 109:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 111:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 112:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 113:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 114:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 115:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Get APSR Register
 116:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               APSR Register value
 118:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 119:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 121:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 122:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 123:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 125:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 126:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 127:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 128:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 129:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 132:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****     \return               xPSR Register value
 133:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 134:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 136:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 137:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 138:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 140:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 141:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 142:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 143:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 144:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               PSP Register value
 147:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 148:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 150:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   register uint32_t result;
 151:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 152:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 154:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 155:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 156:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 157:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 158:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 162:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 164:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 166:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 167:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 168:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 169:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               MSP Register value
 172:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 173:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 175:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   register uint32_t result;
 176:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 177:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 179:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 180:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 181:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 182:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 183:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 186:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 188:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 190:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 192:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 193:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 194:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 195:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               Priority Mask value
 198:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 199:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 201:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 202:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 203:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 205:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 206:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 207:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 208:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 209:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 213:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 215:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 217:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 218:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 219:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 221:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 222:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Enable FIQ
 223:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 226:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 228:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 230:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 231:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 232:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 233:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Disable FIQ
 234:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 237:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 239:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 241:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 242:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 243:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 244:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Get Base Priority
 245:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               Base Priority register value
 247:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 248:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 250:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 251:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 252:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 254:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 255:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 256:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 257:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 258:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Set Base Priority
 259:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 262:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 264:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 266:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 267:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 268:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 269:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 274:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 276:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 278:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 279:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 280:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 281:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               Fault Mask register value
 284:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 285:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 287:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 288:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 289:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 291:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 292:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 293:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 294:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 295:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 299:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 301:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 303:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 304:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 306:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 307:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 309:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 310:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Get FPSCR
 311:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 314:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 316:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 318:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 319:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 321:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 323:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 324:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #else
 325:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    return(0);
 326:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #endif
 327:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 328:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 329:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 330:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 331:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Set FPSCR
 332:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 335:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 337:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 340:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 342:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #endif
 343:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 344:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 345:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 347:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 348:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 349:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 351:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 352:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   Access to dedicated instructions
 355:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   @{
 356:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** */
 357:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 358:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #else
 365:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #endif
 368:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 369:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 370:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   No Operation
 371:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 373:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 375:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 377:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 378:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 379:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 380:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 383:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 385:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 387:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 388:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 389:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 390:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Wait For Event
 391:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 394:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 396:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 398:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 399:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 400:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 401:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Send Event
 402:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 404:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 406:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 408:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 409:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 410:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 411:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****            after the instruction has been completed.
 415:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 416:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 418:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 420:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 421:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 422:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 423:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 427:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 429:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 431:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 432:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 433:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 434:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 438:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 440:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 442:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 443:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 444:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 445:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 449:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 450:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 452:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return __builtin_bswap32(value);
  42              		.loc 2 453 0
  43 000e 0A68     		ldr	r2, [r1]
  44              	.LVL1:
  45              	.LBE90:
  46              	.LBE89:
1525:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
1526:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   case CRYP_KEYSIZE_256B:
1527:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Key Initialisation */
1528:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K0LR = __REV(*(uint32_t*)(keyaddr));
1529:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1530:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K0RR = __REV(*(uint32_t*)(keyaddr));
1531:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1532:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K1LR = __REV(*(uint32_t*)(keyaddr));
1533:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1534:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K1RR = __REV(*(uint32_t*)(keyaddr));
1535:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1536:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K2LR = __REV(*(uint32_t*)(keyaddr));
1537:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1538:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K2RR = __REV(*(uint32_t*)(keyaddr));
1539:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1540:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K3LR = __REV(*(uint32_t*)(keyaddr));
1541:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1542:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K3RR = __REV(*(uint32_t*)(keyaddr));
1543:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     break;
1544:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   case CRYP_KEYSIZE_192B:
1545:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K1LR = __REV(*(uint32_t*)(keyaddr));
1546:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1547:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K1RR = __REV(*(uint32_t*)(keyaddr));
1548:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1549:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K2LR = __REV(*(uint32_t*)(keyaddr));
1550:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1551:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K2RR = __REV(*(uint32_t*)(keyaddr));
1552:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1553:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K3LR = __REV(*(uint32_t*)(keyaddr));
1554:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1555:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K3RR = __REV(*(uint32_t*)(keyaddr));
1556:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     break;
1557:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   case CRYP_KEYSIZE_128B:       
1558:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K2LR = __REV(*(uint32_t*)(keyaddr));
  47              		.loc 1 1558 0
  48 0010 0368     		ldr	r3, [r0]
  49              	.LVL2:
  50              	.LBB92:
  51              	.LBB91:
  52              		.loc 2 453 0
  53 0012 12BA     		rev	r2, r2
  54              	.LVL3:
  55              	.LBE91:
  56              	.LBE92:
  57              		.loc 1 1558 0
  58 0014 1A63     		str	r2, [r3, #48]
  59              	.LVL4:
  60              	.LBB93:
  61              	.LBB94:
  62              		.loc 2 453 0
  63 0016 4A68     		ldr	r2, [r1, #4]
  64 0018 12BA     		rev	r2, r2
  65              	.LVL5:
  66              	.LBE94:
  67              	.LBE93:
1559:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1560:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K2RR = __REV(*(uint32_t*)(keyaddr));
  68              		.loc 1 1560 0
  69 001a 5A63     		str	r2, [r3, #52]
  70              	.LVL6:
  71              	.LBB95:
  72              	.LBB96:
  73              		.loc 2 453 0
  74 001c 8A68     		ldr	r2, [r1, #8]
  75 001e 12BA     		rev	r2, r2
  76              	.LVL7:
  77              	.LBE96:
  78              	.LBE95:
1561:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1562:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K3LR = __REV(*(uint32_t*)(keyaddr));
  79              		.loc 1 1562 0
  80 0020 9A63     		str	r2, [r3, #56]
  81              	.LVL8:
  82              	.LBB97:
  83              	.LBB98:
  84              		.loc 2 453 0
  85 0022 CA68     		ldr	r2, [r1, #12]
  86 0024 16E0     		b	.L6
  87              	.LVL9:
  88              	.L4:
  89              	.LBE98:
  90              	.LBE97:
  91              	.LBB100:
  92              	.LBB101:
  93 0026 0A68     		ldr	r2, [r1]
  94              	.LVL10:
  95              	.LBE101:
  96              	.LBE100:
1528:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
  97              		.loc 1 1528 0
  98 0028 0368     		ldr	r3, [r0]
  99              	.LVL11:
 100              	.LBB103:
 101              	.LBB102:
 102              		.loc 2 453 0
 103 002a 12BA     		rev	r2, r2
 104              	.LVL12:
 105              	.LBE102:
 106              	.LBE103:
1528:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 107              		.loc 1 1528 0
 108 002c 1A62     		str	r2, [r3, #32]
 109              	.LVL13:
 110              	.LBB104:
 111              	.LBB105:
 112              		.loc 2 453 0
 113 002e 4A68     		ldr	r2, [r1, #4]
 114 0030 12BA     		rev	r2, r2
 115              	.LVL14:
 116              	.LBE105:
 117              	.LBE104:
1530:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 118              		.loc 1 1530 0
 119 0032 5A62     		str	r2, [r3, #36]
 120              	.LVL15:
 121              	.LBB106:
 122              	.LBB107:
 123              		.loc 2 453 0
 124 0034 8A68     		ldr	r2, [r1, #8]
 125 0036 12BA     		rev	r2, r2
 126              	.LVL16:
 127              	.LBE107:
 128              	.LBE106:
1532:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 129              		.loc 1 1532 0
 130 0038 9A62     		str	r2, [r3, #40]
 131              	.LVL17:
 132              	.LBB108:
 133              	.LBB109:
 134              		.loc 2 453 0
 135 003a CA68     		ldr	r2, [r1, #12]
 136 003c 12BA     		rev	r2, r2
 137              	.LVL18:
 138              	.LBE109:
 139              	.LBE108:
1534:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 140              		.loc 1 1534 0
 141 003e DA62     		str	r2, [r3, #44]
 142              	.LVL19:
 143              	.LBB110:
 144              	.LBB111:
 145              		.loc 2 453 0
 146 0040 0A69     		ldr	r2, [r1, #16]
 147 0042 12BA     		rev	r2, r2
 148              	.LVL20:
 149              	.LBE111:
 150              	.LBE110:
1536:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 151              		.loc 1 1536 0
 152 0044 1A63     		str	r2, [r3, #48]
 153              	.LVL21:
 154              	.LBB112:
 155              	.LBB113:
 156              		.loc 2 453 0
 157 0046 4A69     		ldr	r2, [r1, #20]
 158 0048 12BA     		rev	r2, r2
 159              	.LVL22:
 160              	.LBE113:
 161              	.LBE112:
1538:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 162              		.loc 1 1538 0
 163 004a 5A63     		str	r2, [r3, #52]
 164              	.LVL23:
 165              	.LBB114:
 166              	.LBB115:
 167              		.loc 2 453 0
 168 004c 8A69     		ldr	r2, [r1, #24]
 169 004e 12BA     		rev	r2, r2
 170              	.LVL24:
 171              	.LBE115:
 172              	.LBE114:
1540:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 173              		.loc 1 1540 0
 174 0050 9A63     		str	r2, [r3, #56]
 175              	.LVL25:
 176              	.LBB116:
 177              	.LBB117:
 178              		.loc 2 453 0
 179 0052 CA69     		ldr	r2, [r1, #28]
 180              	.LVL26:
 181              	.L6:
 182              	.LBE117:
 183              	.LBE116:
 184              	.LBB118:
 185              	.LBB99:
 186 0054 12BA     		rev	r2, r2
 187              	.LBE99:
 188              	.LBE118:
1563:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
1564:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->K3RR = __REV(*(uint32_t*)(keyaddr));
 189              		.loc 1 1564 0
 190 0056 DA63     		str	r2, [r3, #60]
 191              	.L1:
 192 0058 7047     		bx	lr
 193              	.LVL27:
 194              	.L3:
 195              	.LBB119:
 196              	.LBB120:
 197              		.loc 2 453 0
 198 005a 0A68     		ldr	r2, [r1]
 199              	.LVL28:
 200              	.LBE120:
 201              	.LBE119:
1545:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 202              		.loc 1 1545 0
 203 005c 0368     		ldr	r3, [r0]
 204              	.LVL29:
 205              	.LBB122:
 206              	.LBB121:
 207              		.loc 2 453 0
 208 005e 12BA     		rev	r2, r2
 209              	.LVL30:
 210              	.LBE121:
 211              	.LBE122:
1545:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 212              		.loc 1 1545 0
 213 0060 9A62     		str	r2, [r3, #40]
 214              	.LVL31:
 215              	.LBB123:
 216              	.LBB124:
 217              		.loc 2 453 0
 218 0062 4A68     		ldr	r2, [r1, #4]
 219 0064 12BA     		rev	r2, r2
 220              	.LVL32:
 221              	.LBE124:
 222              	.LBE123:
1547:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 223              		.loc 1 1547 0
 224 0066 DA62     		str	r2, [r3, #44]
 225              	.LVL33:
 226              	.LBB125:
 227              	.LBB126:
 228              		.loc 2 453 0
 229 0068 8A68     		ldr	r2, [r1, #8]
 230 006a 12BA     		rev	r2, r2
 231              	.LVL34:
 232              	.LBE126:
 233              	.LBE125:
1549:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 234              		.loc 1 1549 0
 235 006c 1A63     		str	r2, [r3, #48]
 236              	.LVL35:
 237              	.LBB127:
 238              	.LBB128:
 239              		.loc 2 453 0
 240 006e CA68     		ldr	r2, [r1, #12]
 241 0070 12BA     		rev	r2, r2
 242              	.LVL36:
 243              	.LBE128:
 244              	.LBE127:
1551:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 245              		.loc 1 1551 0
 246 0072 5A63     		str	r2, [r3, #52]
 247              	.LVL37:
 248              	.LBB129:
 249              	.LBB130:
 250              		.loc 2 453 0
 251 0074 0A69     		ldr	r2, [r1, #16]
 252 0076 12BA     		rev	r2, r2
 253              	.LVL38:
 254              	.LBE130:
 255              	.LBE129:
1553:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     keyaddr+=4U;
 256              		.loc 1 1553 0
 257 0078 9A63     		str	r2, [r3, #56]
 258              	.LVL39:
 259              	.LBB131:
 260              	.LBB132:
 261              		.loc 2 453 0
 262 007a 4A69     		ldr	r2, [r1, #20]
 263 007c EAE7     		b	.L6
 264              	.LBE132:
 265              	.LBE131:
 266              		.cfi_endproc
 267              	.LFE137:
 269              		.section	.text.HAL_GetTick,"ax",%progbits
 270              		.align	1
 271              		.global	HAL_GetTick
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu fpv4-sp-d16
 277              	HAL_GetTick:
 278              	.LFB124:
  53:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 	static uint32_t tick;
 279              		.loc 1 53 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
  55:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 284              		.loc 1 55 0
 285 0000 024B     		ldr	r3, .L8
 286 0002 1868     		ldr	r0, [r3]
 287 0004 421C     		adds	r2, r0, #1
 288 0006 1A60     		str	r2, [r3]
  56:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 289              		.loc 1 56 0
 290 0008 7047     		bx	lr
 291              	.L9:
 292 000a 00BF     		.align	2
 293              	.L8:
 294 000c 00000000 		.word	.LANCHOR0
 295              		.cfi_endproc
 296              	.LFE124:
 298              		.section	.text.CRYP_ProcessData,"ax",%progbits
 299              		.align	1
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 303              		.fpu fpv4-sp-d16
 305              	CRYP_ProcessData:
 306              	.LFB138:
1565:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     break;
1566:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   default:
1567:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     break;
1568:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1569:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
1570:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1571:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** static HAL_StatusTypeDef CRYP_ProcessData(CRYP_HandleTypeDef *hcryp, uint8_t* Input, uint16_t Ileng
1572:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1573:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
1574:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Process Data: Writes Input data in polling mode and read the output data
1575:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
1576:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         the configuration information for CRYP module
1577:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Input Pointer to the Input buffer
1578:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Ilength Length of the Input buffer, must be a multiple of 16.
1579:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Output Pointer to the returned buffer
1580:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Timeout Timeout value
1581:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval None
1582:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
1583:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** static HAL_StatusTypeDef CRYP_ProcessData(CRYP_HandleTypeDef *hcryp, uint8_t* Input, uint16_t Ileng
1584:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 307              		.loc 1 1584 0
 308              		.cfi_startproc
 309              		@ args = 4, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              	.LVL40:
 312 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 313              	.LCFI0:
 314              		.cfi_def_cfa_offset 32
 315              		.cfi_offset 3, -32
 316              		.cfi_offset 4, -28
 317              		.cfi_offset 5, -24
 318              		.cfi_offset 6, -20
 319              		.cfi_offset 7, -16
 320              		.cfi_offset 8, -12
 321              		.cfi_offset 9, -8
 322              		.cfi_offset 14, -4
 323              		.loc 1 1584 0
 324 0004 089E     		ldr	r6, [sp, #32]
 325 0006 0546     		mov	r5, r0
 326 0008 9046     		mov	r8, r2
 327              	.LVL41:
 328 000a 1F46     		mov	r7, r3
 329 000c 1031     		adds	r1, r1, #16
 330              	.LVL42:
1585:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t tickstart = 0U;
1586:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1587:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t i = 0U;
1588:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t inputaddr  = (uint32_t)Input;
1589:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t outputaddr = (uint32_t)Output;
 331              		.loc 1 1589 0
 332 000e 1C46     		mov	r4, r3
 333              	.LVL43:
 334              	.L11:
1590:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1591:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   for(i=0U; (i < Ilength); i+=16U)
 335              		.loc 1 1591 0 discriminator 1
 336 0010 E31B     		subs	r3, r4, r7
 337 0012 9845     		cmp	r8, r3
 338 0014 02D8     		bhi	.L18
1592:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
1593:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Write the Input block in the IN FIFO */
1594:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->DR = *(uint32_t*)(inputaddr);
1595:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     inputaddr+=4U;
1596:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->DR = *(uint32_t*)(inputaddr);
1597:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     inputaddr+=4U;
1598:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->DR  = *(uint32_t*)(inputaddr);
1599:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     inputaddr+=4U;
1600:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Instance->DR = *(uint32_t*)(inputaddr);
1601:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     inputaddr+=4U;
1602:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1603:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Get tick */
1604:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     tickstart = HAL_GetTick();
1605:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1606:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     while(HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_OFNE))
1607:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {    
1608:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Check for the Timeout */
1609:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if(Timeout != HAL_MAX_DELAY)
1610:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
1611:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
1612:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
1613:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           /* Change state */
1614:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           hcryp->State = HAL_CRYP_STATE_TIMEOUT;
1615:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           
1616:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           /* Process Unlocked */
1617:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           __HAL_UNLOCK(hcryp);
1618:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         
1619:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
1620:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
1621:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
1622:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
1623:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Read the Output block from the Output FIFO */
1624:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     *(uint32_t*)(outputaddr) = hcryp->Instance->DOUT;
1625:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     outputaddr+=4U;
1626:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     *(uint32_t*)(outputaddr) = hcryp->Instance->DOUT;
1627:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     outputaddr+=4U;
1628:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     *(uint32_t*)(outputaddr) = hcryp->Instance->DOUT;
1629:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     outputaddr+=4U;
1630:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     *(uint32_t*)(outputaddr) = hcryp->Instance->DOUT;
1631:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     outputaddr+=4U;
1632:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1633:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Return function status */
1634:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 339              		.loc 1 1634 0
 340 0016 0020     		movs	r0, #0
1635:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 341              		.loc 1 1635 0
 342 0018 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 343              	.LVL44:
 344              	.L18:
1594:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     inputaddr+=4U;
 345              		.loc 1 1594 0
 346 001c 2B68     		ldr	r3, [r5]
 347 001e 51F8102C 		ldr	r2, [r1, #-16]
 348 0022 9A60     		str	r2, [r3, #8]
 349              	.LVL45:
1596:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     inputaddr+=4U;
 350              		.loc 1 1596 0
 351 0024 51F80C2C 		ldr	r2, [r1, #-12]
 352 0028 9A60     		str	r2, [r3, #8]
 353              	.LVL46:
1598:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     inputaddr+=4U;
 354              		.loc 1 1598 0
 355 002a 51F8082C 		ldr	r2, [r1, #-8]
 356 002e 9A60     		str	r2, [r3, #8]
 357              	.LVL47:
1600:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     inputaddr+=4U;
 358              		.loc 1 1600 0
 359 0030 51F8042C 		ldr	r2, [r1, #-4]
 360 0034 9A60     		str	r2, [r3, #8]
 361              	.LVL48:
1604:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 362              		.loc 1 1604 0
 363 0036 FFF7FEFF 		bl	HAL_GetTick
 364              	.LVL49:
 365 003a 8146     		mov	r9, r0
 366              	.LVL50:
 367              	.L12:
1606:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {    
 368              		.loc 1 1606 0
 369 003c 2B68     		ldr	r3, [r5]
 370              	.L13:
 371 003e 5A68     		ldr	r2, [r3, #4]
 372 0040 5207     		lsls	r2, r2, #29
 373 0042 0AD5     		bpl	.L17
1624:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     outputaddr+=4U;
 374              		.loc 1 1624 0 discriminator 2
 375 0044 DA68     		ldr	r2, [r3, #12]
 376 0046 2260     		str	r2, [r4]
 377              	.LVL51:
1626:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     outputaddr+=4U;
 378              		.loc 1 1626 0 discriminator 2
 379 0048 DA68     		ldr	r2, [r3, #12]
 380 004a 6260     		str	r2, [r4, #4]
 381              	.LVL52:
1628:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     outputaddr+=4U;
 382              		.loc 1 1628 0 discriminator 2
 383 004c DA68     		ldr	r2, [r3, #12]
 384 004e A260     		str	r2, [r4, #8]
 385              	.LVL53:
1630:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     outputaddr+=4U;
 386              		.loc 1 1630 0 discriminator 2
 387 0050 DB68     		ldr	r3, [r3, #12]
 388 0052 E360     		str	r3, [r4, #12]
 389 0054 1031     		adds	r1, r1, #16
1631:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 390              		.loc 1 1631 0 discriminator 2
 391 0056 1034     		adds	r4, r4, #16
 392              	.LVL54:
 393 0058 DAE7     		b	.L11
 394              	.LVL55:
 395              	.L17:
1609:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 396              		.loc 1 1609 0
 397 005a 701C     		adds	r0, r6, #1
 398 005c EFD0     		beq	.L13
1611:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 399              		.loc 1 1611 0
 400 005e 3EB9     		cbnz	r6, .L14
 401              	.L16:
1614:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           
 402              		.loc 1 1614 0
 403 0060 0320     		movs	r0, #3
1617:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         
 404              		.loc 1 1617 0
 405 0062 0023     		movs	r3, #0
1614:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           
 406              		.loc 1 1614 0
 407 0064 85F83D00 		strb	r0, [r5, #61]
1617:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         
 408              		.loc 1 1617 0
 409 0068 85F83C30 		strb	r3, [r5, #60]
1619:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 410              		.loc 1 1619 0
 411 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 412              	.LVL56:
 413              	.L14:
1611:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 414              		.loc 1 1611 0 discriminator 1
 415 0070 FFF7FEFF 		bl	HAL_GetTick
 416              	.LVL57:
 417 0074 A0EB0900 		sub	r0, r0, r9
 418 0078 8642     		cmp	r6, r0
 419 007a DFD2     		bcs	.L12
 420 007c F0E7     		b	.L16
 421              		.cfi_endproc
 422              	.LFE138:
 424              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 425              		.align	1
 426              		.global	RCC_AHB2PeriphClockCmd
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	RCC_AHB2PeriphClockCmd:
 433              	.LFB125:
  75:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
 434              		.loc 1 75 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439              	.LVL58:
 440 0000 044B     		ldr	r3, .L25
  82:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 441              		.loc 1 82 0
 442 0002 5A6B     		ldr	r2, [r3, #52]
  80:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 443              		.loc 1 80 0
 444 0004 11B1     		cbz	r1, .L22
  82:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 445              		.loc 1 82 0
 446 0006 1043     		orrs	r0, r0, r2
 447              	.LVL59:
 448              	.L24:
  86:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 449              		.loc 1 86 0
 450 0008 5863     		str	r0, [r3, #52]
 451 000a 7047     		bx	lr
 452              	.LVL60:
 453              	.L22:
 454 000c 22EA0000 		bic	r0, r2, r0
 455              	.LVL61:
 456 0010 FAE7     		b	.L24
 457              	.L26:
 458 0012 00BF     		.align	2
 459              	.L25:
 460 0014 00380240 		.word	1073887232
 461              		.cfi_endproc
 462              	.LFE125:
 464              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 465              		.align	1
 466              		.global	HAL_RCC_OscConfig
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	HAL_RCC_OscConfig:
 473              	.LFB126:
 105:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 474              		.loc 1 105 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 8
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              	.LVL62:
 111:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 479              		.loc 1 111 0
 480 0000 0368     		ldr	r3, [r0]
 105:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 481              		.loc 1 105 0
 482 0002 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 483              	.LCFI1:
 484              		.cfi_def_cfa_offset 32
 485              		.cfi_offset 4, -20
 486              		.cfi_offset 5, -16
 487              		.cfi_offset 6, -12
 488              		.cfi_offset 7, -8
 489              		.cfi_offset 14, -4
 111:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 490              		.loc 1 111 0
 491 0004 DC07     		lsls	r4, r3, #31
 105:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 492              		.loc 1 105 0
 493 0006 0146     		mov	r1, r0
 111:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 494              		.loc 1 111 0
 495 0008 3BD4     		bmi	.L28
 496              	.LVL63:
 497              	.L33:
 161:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 498              		.loc 1 161 0
 499 000a 0B68     		ldr	r3, [r1]
 500 000c 9807     		lsls	r0, r3, #30
 501 000e 00F18680 		bmi	.L29
 502              	.L44:
 226:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 503              		.loc 1 226 0
 504 0012 0B68     		ldr	r3, [r1]
 505 0014 1B07     		lsls	r3, r3, #28
 506 0016 00F1D180 		bmi	.L54
 507              	.L60:
 268:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 508              		.loc 1 268 0
 509 001a 0B68     		ldr	r3, [r1]
 510 001c 5F07     		lsls	r7, r3, #29
 511 001e 2AD5     		bpl	.L56
 512              	.LBB133:
 274:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 513              		.loc 1 274 0
 514 0020 0023     		movs	r3, #0
 515 0022 0193     		str	r3, [sp, #4]
 516 0024 8E4B     		ldr	r3, .L105
 517              	.LBE133:
 277:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 518              		.loc 1 277 0
 519 0026 8F4C     		ldr	r4, .L105+4
 520              	.LBB134:
 274:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 521              		.loc 1 274 0
 522 0028 1A6C     		ldr	r2, [r3, #64]
 523 002a 42F08052 		orr	r2, r2, #268435456
 524 002e 1A64     		str	r2, [r3, #64]
 525 0030 1B6C     		ldr	r3, [r3, #64]
 526 0032 03F08053 		and	r3, r3, #268435456
 527 0036 0193     		str	r3, [sp, #4]
 528 0038 019B     		ldr	r3, [sp, #4]
 529              	.LBE134:
 277:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 530              		.loc 1 277 0
 531 003a 2368     		ldr	r3, [r4]
 532 003c 43F48073 		orr	r3, r3, #256
 533 0040 2360     		str	r3, [r4]
 280:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 534              		.loc 1 280 0
 535 0042 FFF7FEFF 		bl	HAL_GetTick
 536              	.LVL64:
 537 0046 0546     		mov	r5, r0
 538              	.LVL65:
 539              	.L65:
 282:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 540              		.loc 1 282 0
 541 0048 2368     		ldr	r3, [r4]
 542 004a DA05     		lsls	r2, r3, #23
 543 004c 40F1D880 		bpl	.L66
 291:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the LSE State */
 544              		.loc 1 291 0
 545 0050 8B68     		ldr	r3, [r1, #8]
 546 0052 834C     		ldr	r4, .L105
 547 0054 012B     		cmp	r3, #1
 548 0056 40F0DA80 		bne	.L67
 549              	.L104:
 291:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the LSE State */
 550              		.loc 1 291 0 is_stmt 0 discriminator 3
 551 005a 236F     		ldr	r3, [r4, #112]
 552 005c 43F00103 		orr	r3, r3, #1
 553 0060 2367     		str	r3, [r4, #112]
 554              	.L83:
 296:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 555              		.loc 1 296 0 is_stmt 1
 556 0062 FFF7FEFF 		bl	HAL_GetTick
 557              	.LVL66:
 299:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 558              		.loc 1 299 0
 559 0066 7E4C     		ldr	r4, .L105
 296:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 560              		.loc 1 296 0
 561 0068 0546     		mov	r5, r0
 562              	.LVL67:
 301:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 563              		.loc 1 301 0
 564 006a 41F28836 		movw	r6, #5000
 565              	.LVL68:
 566              	.L71:
 299:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 567              		.loc 1 299 0
 568 006e 236F     		ldr	r3, [r4, #112]
 569 0070 9B07     		lsls	r3, r3, #30
 570 0072 40F1ED80 		bpl	.L72
 571              	.LVL69:
 572              	.L56:
 325:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 573              		.loc 1 325 0
 574 0076 8A69     		ldr	r2, [r1, #24]
 575 0078 002A     		cmp	r2, #0
 576 007a 40F0F980 		bne	.L63
 577              	.LVL70:
 578              	.L64:
 398:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 579              		.loc 1 398 0
 580 007e 0020     		movs	r0, #0
 581 0080 15E0     		b	.L34
 582              	.LVL71:
 583              	.L28:
 116:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 584              		.loc 1 116 0
 585 0082 774B     		ldr	r3, .L105
 586 0084 9A68     		ldr	r2, [r3, #8]
 587 0086 02F00C02 		and	r2, r2, #12
 588 008a 042A     		cmp	r2, #4
 589 008c 07D0     		beq	.L31
 117:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 590              		.loc 1 117 0 discriminator 1
 591 008e 9A68     		ldr	r2, [r3, #8]
 592 0090 02F00C02 		and	r2, r2, #12
 116:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 593              		.loc 1 116 0 discriminator 1
 594 0094 082A     		cmp	r2, #8
 595 0096 0CD1     		bne	.L32
 117:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 596              		.loc 1 117 0
 597 0098 5B68     		ldr	r3, [r3, #4]
 598 009a 5A02     		lsls	r2, r3, #9
 599 009c 09D5     		bpl	.L32
 600              	.L31:
 119:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 601              		.loc 1 119 0
 602 009e 704B     		ldr	r3, .L105
 603 00a0 1B68     		ldr	r3, [r3]
 604 00a2 9B03     		lsls	r3, r3, #14
 605 00a4 B1D5     		bpl	.L33
 119:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 606              		.loc 1 119 0 is_stmt 0 discriminator 1
 607 00a6 4B68     		ldr	r3, [r1, #4]
 608 00a8 002B     		cmp	r3, #0
 609 00aa AED1     		bne	.L33
 610              	.LVL72:
 611              	.L48:
 121:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 612              		.loc 1 121 0 is_stmt 1
 613 00ac 0120     		movs	r0, #1
 614              	.LVL73:
 615              	.L34:
 399:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 616              		.loc 1 399 0
 617 00ae 03B0     		add	sp, sp, #12
 618              	.LCFI2:
 619              		.cfi_remember_state
 620              		.cfi_def_cfa_offset 20
 621              		@ sp needed
 622 00b0 F0BD     		pop	{r4, r5, r6, r7, pc}
 623              	.LVL74:
 624              	.L32:
 625              	.LCFI3:
 626              		.cfi_restore_state
 127:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 627              		.loc 1 127 0
 628 00b2 4B68     		ldr	r3, [r1, #4]
 629 00b4 6A4C     		ldr	r4, .L105
 630 00b6 B3F5803F 		cmp	r3, #65536
 631 00ba 11D1     		bne	.L35
 632              	.L103:
 127:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 633              		.loc 1 127 0 is_stmt 0 discriminator 3
 634 00bc 2368     		ldr	r3, [r4]
 635 00be 43F48033 		orr	r3, r3, #65536
 636 00c2 2360     		str	r3, [r4]
 637              	.L82:
 133:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 638              		.loc 1 133 0 is_stmt 1
 639 00c4 FFF7FEFF 		bl	HAL_GetTick
 640              	.LVL75:
 136:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 641              		.loc 1 136 0
 642 00c8 654C     		ldr	r4, .L105
 133:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 643              		.loc 1 133 0
 644 00ca 0546     		mov	r5, r0
 645              	.LVL76:
 646              	.L39:
 136:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 647              		.loc 1 136 0
 648 00cc 2368     		ldr	r3, [r4]
 649 00ce 9F03     		lsls	r7, r3, #14
 650 00d0 9BD4     		bmi	.L33
 138:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 651              		.loc 1 138 0
 652 00d2 FFF7FEFF 		bl	HAL_GetTick
 653              	.LVL77:
 654 00d6 401B     		subs	r0, r0, r5
 655 00d8 6428     		cmp	r0, #100
 656 00da F7D9     		bls	.L39
 657              	.LVL78:
 658              	.L42:
 140:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           }
 659              		.loc 1 140 0
 660 00dc 0320     		movs	r0, #3
 661 00de E6E7     		b	.L34
 662              	.LVL79:
 663              	.L35:
 127:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 664              		.loc 1 127 0 discriminator 2
 665 00e0 B3F5A02F 		cmp	r3, #327680
 666 00e4 04D1     		bne	.L37
 127:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 667              		.loc 1 127 0 is_stmt 0 discriminator 3
 668 00e6 2368     		ldr	r3, [r4]
 669 00e8 43F48023 		orr	r3, r3, #262144
 670 00ec 2360     		str	r3, [r4]
 671 00ee E5E7     		b	.L103
 672              	.L37:
 127:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 673              		.loc 1 127 0 discriminator 4
 674 00f0 2268     		ldr	r2, [r4]
 675 00f2 22F48032 		bic	r2, r2, #65536
 676 00f6 2260     		str	r2, [r4]
 677 00f8 2268     		ldr	r2, [r4]
 678 00fa 22F48022 		bic	r2, r2, #262144
 679 00fe 2260     		str	r2, [r4]
 130:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 680              		.loc 1 130 0 is_stmt 1 discriminator 4
 681 0100 002B     		cmp	r3, #0
 682 0102 DFD1     		bne	.L82
 147:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 683              		.loc 1 147 0
 684 0104 FFF7FEFF 		bl	HAL_GetTick
 685              	.LVL80:
 686 0108 0546     		mov	r5, r0
 687              	.LVL81:
 688              	.L41:
 150:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 689              		.loc 1 150 0
 690 010a 2368     		ldr	r3, [r4]
 691 010c 9E03     		lsls	r6, r3, #14
 692 010e 7FF57CAF 		bpl	.L33
 152:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 693              		.loc 1 152 0
 694 0112 FFF7FEFF 		bl	HAL_GetTick
 695              	.LVL82:
 696 0116 401B     		subs	r0, r0, r5
 697 0118 6428     		cmp	r0, #100
 698 011a F6D9     		bls	.L41
 699 011c DEE7     		b	.L42
 700              	.LVL83:
 701              	.L29:
 168:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 702              		.loc 1 168 0
 703 011e 504B     		ldr	r3, .L105
 704 0120 9A68     		ldr	r2, [r3, #8]
 705 0122 12F00C0F 		tst	r2, #12
 706 0126 07D0     		beq	.L45
 169:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 707              		.loc 1 169 0 discriminator 1
 708 0128 9A68     		ldr	r2, [r3, #8]
 709 012a 02F00C02 		and	r2, r2, #12
 168:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 710              		.loc 1 168 0 discriminator 1
 711 012e 082A     		cmp	r2, #8
 712 0130 16D1     		bne	.L46
 169:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 713              		.loc 1 169 0
 714 0132 5B68     		ldr	r3, [r3, #4]
 715 0134 5D02     		lsls	r5, r3, #9
 716 0136 13D4     		bmi	.L46
 717              	.L45:
 172:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 718              		.loc 1 172 0
 719 0138 494B     		ldr	r3, .L105
 720 013a 1A68     		ldr	r2, [r3]
 721 013c 9407     		lsls	r4, r2, #30
 722 013e 02D5     		bpl	.L47
 172:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 723              		.loc 1 172 0 is_stmt 0 discriminator 1
 724 0140 CA68     		ldr	r2, [r1, #12]
 725 0142 012A     		cmp	r2, #1
 726 0144 B2D1     		bne	.L48
 727              	.L47:
 180:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 728              		.loc 1 180 0 is_stmt 1
 729 0146 1C68     		ldr	r4, [r3]
 730              	.LVL84:
 731              	.LBB135:
 732              	.LBB136:
 454:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #else
 455:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 456:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 457:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 459:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #endif
 460:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 461:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 462:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 463:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 464:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 468:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 469:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 471:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 472:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 473:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 475:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 476:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 477:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 478:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 479:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 483:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 484:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 486:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #else
 489:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   int32_t result;
 490:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 491:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return(result);
 493:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #endif
 494:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 495:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 496:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 497:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 498:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               Rotated value
 503:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 504:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 506:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** }
 508:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 509:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 510:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 511:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Breakpoint
 512:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 517:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 519:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 520:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** /**
 521:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 525:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****  */
 526:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** {
 528:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 529:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** 
 530:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:.././hal/stm32f4/CMSIS/core/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 733              		.loc 2 531 0
 734 0148 F822     		movs	r2, #248
 735              		.syntax unified
 736              	@ 531 ".././hal/stm32f4/CMSIS/core/cmsis_gcc.h" 1
 737 014a 92FAA2F2 		rbit r2, r2
 738              	@ 0 "" 2
 739              	.LVL85:
 740              		.thumb
 741              		.syntax unified
 742              	.LBE136:
 743              	.LBE135:
 180:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 744              		.loc 1 180 0
 745 014e B2FA82F0 		clz	r0, r2
 746 0152 0A69     		ldr	r2, [r1, #16]
 747 0154 8240     		lsls	r2, r2, r0
 748 0156 24F0F800 		bic	r0, r4, #248
 749 015a 0243     		orrs	r2, r2, r0
 750 015c 1A60     		str	r2, [r3]
 172:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 751              		.loc 1 172 0
 752 015e 58E7     		b	.L44
 753              	.L46:
 186:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 754              		.loc 1 186 0
 755 0160 CA68     		ldr	r2, [r1, #12]
 756 0162 414B     		ldr	r3, .L105+8
 757 0164 DAB1     		cbz	r2, .L49
 189:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 758              		.loc 1 189 0
 759 0166 0122     		movs	r2, #1
 760 0168 1A60     		str	r2, [r3]
 192:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 761              		.loc 1 192 0
 762 016a FFF7FEFF 		bl	HAL_GetTick
 763              	.LVL86:
 195:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 764              		.loc 1 195 0
 765 016e 3C4C     		ldr	r4, .L105
 192:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 766              		.loc 1 192 0
 767 0170 0546     		mov	r5, r0
 768              	.LVL87:
 769              	.L50:
 195:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 770              		.loc 1 195 0
 771 0172 2368     		ldr	r3, [r4]
 772 0174 9807     		lsls	r0, r3, #30
 773 0176 0CD5     		bpl	.L51
 204:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 774              		.loc 1 204 0
 775 0178 2068     		ldr	r0, [r4]
 776              	.LVL88:
 777              	.LBB137:
 778              	.LBB138:
 779              		.loc 2 531 0
 780 017a F823     		movs	r3, #248
 781              		.syntax unified
 782              	@ 531 ".././hal/stm32f4/CMSIS/core/cmsis_gcc.h" 1
 783 017c 93FAA3F3 		rbit r3, r3
 784              	@ 0 "" 2
 785              	.LVL89:
 786              		.thumb
 787              		.syntax unified
 788              	.LBE138:
 789              	.LBE137:
 204:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 790              		.loc 1 204 0
 791 0180 B3FA83F2 		clz	r2, r3
 792 0184 0B69     		ldr	r3, [r1, #16]
 793 0186 9340     		lsls	r3, r3, r2
 794 0188 20F0F802 		bic	r2, r0, #248
 795 018c 1343     		orrs	r3, r3, r2
 796 018e 2360     		str	r3, [r4]
 797 0190 3FE7     		b	.L44
 798              	.L51:
 197:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 799              		.loc 1 197 0
 800 0192 FFF7FEFF 		bl	HAL_GetTick
 801              	.LVL90:
 802 0196 401B     		subs	r0, r0, r5
 803 0198 0228     		cmp	r0, #2
 804 019a EAD9     		bls	.L50
 805 019c 9EE7     		b	.L42
 806              	.LVL91:
 807              	.L49:
 209:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 808              		.loc 1 209 0
 809 019e 1A60     		str	r2, [r3]
 212:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 810              		.loc 1 212 0
 811 01a0 FFF7FEFF 		bl	HAL_GetTick
 812              	.LVL92:
 215:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 813              		.loc 1 215 0
 814 01a4 2E4C     		ldr	r4, .L105
 212:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 815              		.loc 1 212 0
 816 01a6 0546     		mov	r5, r0
 817              	.LVL93:
 818              	.L52:
 215:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 819              		.loc 1 215 0
 820 01a8 2368     		ldr	r3, [r4]
 821 01aa 9A07     		lsls	r2, r3, #30
 822 01ac 7FF531AF 		bpl	.L44
 217:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 823              		.loc 1 217 0
 824 01b0 FFF7FEFF 		bl	HAL_GetTick
 825              	.LVL94:
 826 01b4 401B     		subs	r0, r0, r5
 827 01b6 0228     		cmp	r0, #2
 828 01b8 F6D9     		bls	.L52
 829 01ba 8FE7     		b	.L42
 830              	.LVL95:
 831              	.L54:
 232:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 832              		.loc 1 232 0
 833 01bc 4A69     		ldr	r2, [r1, #20]
 834 01be 2B4B     		ldr	r3, .L105+12
 835 01c0 7AB1     		cbz	r2, .L57
 235:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 836              		.loc 1 235 0
 837 01c2 0122     		movs	r2, #1
 838 01c4 1A60     		str	r2, [r3]
 238:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 839              		.loc 1 238 0
 840 01c6 FFF7FEFF 		bl	HAL_GetTick
 841              	.LVL96:
 241:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 842              		.loc 1 241 0
 843 01ca 254C     		ldr	r4, .L105
 238:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 844              		.loc 1 238 0
 845 01cc 0546     		mov	r5, r0
 846              	.LVL97:
 847              	.L58:
 241:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 848              		.loc 1 241 0
 849 01ce 636F     		ldr	r3, [r4, #116]
 850 01d0 9E07     		lsls	r6, r3, #30
 851 01d2 3FF522AF 		bmi	.L60
 243:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 852              		.loc 1 243 0
 853 01d6 FFF7FEFF 		bl	HAL_GetTick
 854              	.LVL98:
 855 01da 401B     		subs	r0, r0, r5
 856 01dc 0228     		cmp	r0, #2
 857 01de F6D9     		bls	.L58
 858 01e0 7CE7     		b	.L42
 859              	.LVL99:
 860              	.L57:
 252:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 861              		.loc 1 252 0
 862 01e2 1A60     		str	r2, [r3]
 255:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 863              		.loc 1 255 0
 864 01e4 FFF7FEFF 		bl	HAL_GetTick
 865              	.LVL100:
 258:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 866              		.loc 1 258 0
 867 01e8 1D4C     		ldr	r4, .L105
 255:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 868              		.loc 1 255 0
 869 01ea 0546     		mov	r5, r0
 870              	.LVL101:
 871              	.L61:
 258:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 872              		.loc 1 258 0
 873 01ec 636F     		ldr	r3, [r4, #116]
 874 01ee 9807     		lsls	r0, r3, #30
 875 01f0 7FF513AF 		bpl	.L60
 260:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 876              		.loc 1 260 0
 877 01f4 FFF7FEFF 		bl	HAL_GetTick
 878              	.LVL102:
 879 01f8 401B     		subs	r0, r0, r5
 880 01fa 0228     		cmp	r0, #2
 881 01fc F6D9     		bls	.L61
 882 01fe 6DE7     		b	.L42
 883              	.L66:
 284:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 884              		.loc 1 284 0
 885 0200 FFF7FEFF 		bl	HAL_GetTick
 886              	.LVL103:
 887 0204 401B     		subs	r0, r0, r5
 888 0206 0228     		cmp	r0, #2
 889 0208 7FF61EAF 		bls	.L65
 890 020c 66E7     		b	.L42
 891              	.L67:
 291:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the LSE State */
 892              		.loc 1 291 0 discriminator 2
 893 020e 052B     		cmp	r3, #5
 894 0210 04D1     		bne	.L69
 291:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the LSE State */
 895              		.loc 1 291 0 is_stmt 0 discriminator 3
 896 0212 236F     		ldr	r3, [r4, #112]
 897 0214 43F00403 		orr	r3, r3, #4
 898 0218 2367     		str	r3, [r4, #112]
 899 021a 1EE7     		b	.L104
 900              	.L69:
 291:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Check the LSE State */
 901              		.loc 1 291 0 discriminator 4
 902 021c 226F     		ldr	r2, [r4, #112]
 903 021e 22F00102 		bic	r2, r2, #1
 904 0222 2267     		str	r2, [r4, #112]
 905 0224 226F     		ldr	r2, [r4, #112]
 906 0226 22F00402 		bic	r2, r2, #4
 907 022a 2267     		str	r2, [r4, #112]
 293:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 908              		.loc 1 293 0 is_stmt 1 discriminator 4
 909 022c 002B     		cmp	r3, #0
 910 022e 7FF418AF 		bne	.L83
 310:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 911              		.loc 1 310 0
 912 0232 FFF7FEFF 		bl	HAL_GetTick
 913              	.LVL104:
 315:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 914              		.loc 1 315 0
 915 0236 41F28836 		movw	r6, #5000
 310:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 916              		.loc 1 310 0
 917 023a 0546     		mov	r5, r0
 918              	.LVL105:
 919              	.L73:
 313:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 920              		.loc 1 313 0
 921 023c 236F     		ldr	r3, [r4, #112]
 922 023e 9F07     		lsls	r7, r3, #30
 923 0240 7FF519AF 		bpl	.L56
 315:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 924              		.loc 1 315 0
 925 0244 FFF7FEFF 		bl	HAL_GetTick
 926              	.LVL106:
 927 0248 401B     		subs	r0, r0, r5
 928 024a B042     		cmp	r0, r6
 929 024c F6D9     		bls	.L73
 930 024e 45E7     		b	.L42
 931              	.L72:
 301:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 932              		.loc 1 301 0
 933 0250 FFF7FEFF 		bl	HAL_GetTick
 934              	.LVL107:
 935 0254 401B     		subs	r0, r0, r5
 936 0256 B042     		cmp	r0, r6
 937 0258 7FF609AF 		bls	.L71
 938 025c 3EE7     		b	.L42
 939              	.L106:
 940 025e 00BF     		.align	2
 941              	.L105:
 942 0260 00380240 		.word	1073887232
 943 0264 00700040 		.word	1073770496
 944 0268 00004742 		.word	1111949312
 945 026c 800E4742 		.word	1111953024
 946              	.LVL108:
 947              	.L63:
 328:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 948              		.loc 1 328 0
 949 0270 2B4C     		ldr	r4, .L107
 950 0272 A368     		ldr	r3, [r4, #8]
 951 0274 03F00C03 		and	r3, r3, #12
 952 0278 082B     		cmp	r3, #8
 953 027a 3FF417AF 		beq	.L48
 954 027e 294D     		ldr	r5, .L107+4
 955 0280 0023     		movs	r3, #0
 330:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 956              		.loc 1 330 0
 957 0282 022A     		cmp	r2, #2
 340:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 958              		.loc 1 340 0
 959 0284 2B60     		str	r3, [r5]
 330:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 960              		.loc 1 330 0
 961 0286 3ED1     		bne	.L75
 343:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 962              		.loc 1 343 0
 963 0288 FFF7FEFF 		bl	HAL_GetTick
 964              	.LVL109:
 965 028c 0646     		mov	r6, r0
 966              	.LVL110:
 967              	.L76:
 346:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 968              		.loc 1 346 0
 969 028e 2368     		ldr	r3, [r4]
 970 0290 9801     		lsls	r0, r3, #6
 971 0292 32D4     		bmi	.L77
 972              	.LVL111:
 973              	.LBB139:
 974              	.LBB140:
 975              		.loc 2 531 0
 976 0294 47F6C077 		movw	r7, #32704
 977              		.syntax unified
 978              	@ 531 ".././hal/stm32f4/CMSIS/core/cmsis_gcc.h" 1
 979 0298 97FAA7F7 		rbit r7, r7
 980              	@ 0 "" 2
 981              	.LVL112:
 982              		.thumb
 983              		.syntax unified
 984              	.LBE140:
 985              	.LBE139:
 986              	.LBB141:
 987              	.LBB142:
 988 029c 4FF44032 		mov	r2, #196608
 989              	.LBE142:
 990              	.LBE141:
 355:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                  RCC_OscInitStruct->PLL.PLLM                                       
 991              		.loc 1 355 0
 992 02a0 B7FA87F7 		clz	r7, r7
 993              	.LVL113:
 994              	.LBB144:
 995              	.LBB143:
 996              		.loc 2 531 0
 997              		.syntax unified
 998              	@ 531 ".././hal/stm32f4/CMSIS/core/cmsis_gcc.h" 1
 999 02a4 92FAA2F2 		rbit r2, r2
 1000              	@ 0 "" 2
 1001              	.LVL114:
 1002              		.thumb
 1003              		.syntax unified
 1004              	.LBE143:
 1005              	.LBE144:
 1006              	.LBB145:
 1007              	.LBB146:
 1008 02a8 4FF07060 		mov	r0, #251658240
 1009              	.LBE146:
 1010              	.LBE145:
 355:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                  RCC_OscInitStruct->PLL.PLLM                                       
 1011              		.loc 1 355 0
 1012 02ac B2FA82F6 		clz	r6, r2
 1013              	.LVL115:
 1014              	.LBB148:
 1015              	.LBB147:
 1016              		.loc 2 531 0
 1017              		.syntax unified
 1018              	@ 531 ".././hal/stm32f4/CMSIS/core/cmsis_gcc.h" 1
 1019 02b0 90FAA0F0 		rbit r0, r0
 1020              	@ 0 "" 2
 1021              	.LVL116:
 1022              		.thumb
 1023              		.syntax unified
 1024              	.LBE147:
 1025              	.LBE148:
 355:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                  RCC_OscInitStruct->PLL.PLLM                                       
 1026              		.loc 1 355 0
 1027 02b4 0A6A     		ldr	r2, [r1, #32]
 1028 02b6 CB69     		ldr	r3, [r1, #28]
 1029 02b8 1343     		orrs	r3, r3, r2
 1030 02ba 4A6A     		ldr	r2, [r1, #36]
 1031 02bc 02FA07F7 		lsl	r7, r2, r7
 1032 02c0 8A6A     		ldr	r2, [r1, #40]
 1033 02c2 5208     		lsrs	r2, r2, #1
 1034 02c4 013A     		subs	r2, r2, #1
 1035 02c6 B240     		lsls	r2, r2, r6
 1036 02c8 3B43     		orrs	r3, r3, r7
 1037 02ca 1343     		orrs	r3, r3, r2
 1038 02cc CA6A     		ldr	r2, [r1, #44]
 1039 02ce B0FA80F0 		clz	r0, r0
 1040 02d2 02FA00F0 		lsl	r0, r2, r0
 1041 02d6 0343     		orrs	r3, r3, r0
 1042 02d8 6360     		str	r3, [r4, #4]
 361:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1043              		.loc 1 361 0
 1044 02da 0123     		movs	r3, #1
 1045 02dc 2B60     		str	r3, [r5]
 364:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1046              		.loc 1 364 0
 1047 02de FFF7FEFF 		bl	HAL_GetTick
 1048              	.LVL117:
 367:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1049              		.loc 1 367 0
 1050 02e2 0F49     		ldr	r1, .L107
 1051              	.LVL118:
 364:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1052              		.loc 1 364 0
 1053 02e4 0446     		mov	r4, r0
 1054              	.LVL119:
 1055              	.L78:
 367:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1056              		.loc 1 367 0
 1057 02e6 0B68     		ldr	r3, [r1]
 1058 02e8 9A01     		lsls	r2, r3, #6
 1059 02ea 3FF5C8AE 		bmi	.L64
 369:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 1060              		.loc 1 369 0
 1061 02ee FFF7FEFF 		bl	HAL_GetTick
 1062              	.LVL120:
 1063 02f2 001B     		subs	r0, r0, r4
 1064 02f4 0228     		cmp	r0, #2
 1065 02f6 F6D9     		bls	.L78
 1066 02f8 F0E6     		b	.L42
 1067              	.LVL121:
 1068              	.L77:
 348:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 1069              		.loc 1 348 0
 1070 02fa FFF7FEFF 		bl	HAL_GetTick
 1071              	.LVL122:
 1072 02fe 801B     		subs	r0, r0, r6
 1073 0300 0228     		cmp	r0, #2
 1074 0302 C4D9     		bls	.L76
 1075 0304 EAE6     		b	.L42
 1076              	.LVL123:
 1077              	.L75:
 381:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1078              		.loc 1 381 0
 1079 0306 FFF7FEFF 		bl	HAL_GetTick
 1080              	.LVL124:
 1081 030a 0146     		mov	r1, r0
 1082              	.LVL125:
 1083              	.L80:
 384:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1084              		.loc 1 384 0
 1085 030c 2368     		ldr	r3, [r4]
 1086 030e 9B01     		lsls	r3, r3, #6
 1087 0310 7FF5B5AE 		bpl	.L64
 386:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           {
 1088              		.loc 1 386 0
 1089 0314 FFF7FEFF 		bl	HAL_GetTick
 1090              	.LVL126:
 1091 0318 401A     		subs	r0, r0, r1
 1092 031a 0228     		cmp	r0, #2
 1093 031c F6D9     		bls	.L80
 1094 031e DDE6     		b	.L42
 1095              	.L108:
 1096              		.align	2
 1097              	.L107:
 1098 0320 00380240 		.word	1073887232
 1099 0324 60004742 		.word	1111949408
 1100              		.cfi_endproc
 1101              	.LFE126:
 1103              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 1104              		.align	1
 1105              		.global	HAL_RCC_ClockConfig
 1106              		.syntax unified
 1107              		.thumb
 1108              		.thumb_func
 1109              		.fpu fpv4-sp-d16
 1111              	HAL_RCC_ClockConfig:
 1112              	.LFB127:
 427:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 1113              		.loc 1 427 0
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 0
 1116              		@ frame_needed = 0, uses_anonymous_args = 0
 1117              	.LVL127:
 1118 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1119              	.LCFI4:
 1120              		.cfi_def_cfa_offset 24
 1121              		.cfi_offset 3, -24
 1122              		.cfi_offset 4, -20
 1123              		.cfi_offset 5, -16
 1124              		.cfi_offset 6, -12
 1125              		.cfi_offset 7, -8
 1126              		.cfi_offset 14, -4
 439:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1127              		.loc 1 439 0
 1128 0002 494B     		ldr	r3, .L156
 1129 0004 1A68     		ldr	r2, [r3]
 1130 0006 02F00F02 		and	r2, r2, #15
 1131 000a 8A42     		cmp	r2, r1
 427:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 1132              		.loc 1 427 0
 1133 000c 0546     		mov	r5, r0
 439:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1134              		.loc 1 439 0
 1135 000e 1AD3     		bcc	.L110
 1136              	.L113:
 453:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1137              		.loc 1 453 0
 1138 0010 2A68     		ldr	r2, [r5]
 1139 0012 9007     		lsls	r0, r2, #30
 1140              	.LVL128:
 1141 0014 20D4     		bmi	.L111
 1142              	.L112:
 460:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1143              		.loc 1 460 0
 1144 0016 D207     		lsls	r2, r2, #31
 1145 0018 26D4     		bmi	.L115
 1146              	.LVL129:
 1147              	.L125:
 540:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1148              		.loc 1 540 0
 1149 001a 434B     		ldr	r3, .L156
 1150 001c 1A68     		ldr	r2, [r3]
 1151 001e 02F00F02 		and	r2, r2, #15
 1152 0022 9142     		cmp	r1, r2
 1153 0024 70D3     		bcc	.L116
 1154              	.L117:
 554:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1155              		.loc 1 554 0
 1156 0026 2868     		ldr	r0, [r5]
 1157 0028 4307     		lsls	r3, r0, #29
 1158 002a 75D4     		bmi	.L134
 1159              	.LVL130:
 1160              	.L135:
 561:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1161              		.loc 1 561 0
 1162 002c 10F00800 		ands	r0, r0, #8
 1163 0030 08D0     		beq	.L114
 564:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 1164              		.loc 1 564 0
 1165 0032 3E4A     		ldr	r2, .L156+4
 1166 0034 2969     		ldr	r1, [r5, #16]
 1167 0036 9368     		ldr	r3, [r2, #8]
 1168 0038 23F46043 		bic	r3, r3, #57344
 1169 003c 43EAC103 		orr	r3, r3, r1, lsl #3
 1170 0040 9360     		str	r3, [r2, #8]
 573:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 1171              		.loc 1 573 0
 1172 0042 0020     		movs	r0, #0
 1173              	.L114:
 574:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1174              		.loc 1 574 0
 1175 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1176              	.LVL131:
 1177              	.L110:
 442:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1178              		.loc 1 442 0
 1179 0046 CAB2     		uxtb	r2, r1
 1180 0048 1A70     		strb	r2, [r3]
 446:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1181              		.loc 1 446 0
 1182 004a 1B68     		ldr	r3, [r3]
 1183 004c 03F00F03 		and	r3, r3, #15
 1184 0050 9942     		cmp	r1, r3
 1185 0052 DDD0     		beq	.L113
 1186              	.LVL132:
 1187              	.L119:
 448:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 1188              		.loc 1 448 0
 1189 0054 0120     		movs	r0, #1
 1190 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1191              	.LVL133:
 1192              	.L111:
 456:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 1193              		.loc 1 456 0
 1194 0058 3448     		ldr	r0, .L156+4
 1195 005a AC68     		ldr	r4, [r5, #8]
 1196 005c 8368     		ldr	r3, [r0, #8]
 1197 005e 23F0F003 		bic	r3, r3, #240
 1198 0062 2343     		orrs	r3, r3, r4
 1199 0064 8360     		str	r3, [r0, #8]
 1200 0066 D6E7     		b	.L112
 1201              	.L115:
 465:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1202              		.loc 1 465 0
 1203 0068 6A68     		ldr	r2, [r5, #4]
 1204 006a 304B     		ldr	r3, .L156+4
 1205 006c 012A     		cmp	r2, #1
 1206 006e 1DD1     		bne	.L118
 468:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1207              		.loc 1 468 0
 1208 0070 1B68     		ldr	r3, [r3]
 1209 0072 13F4003F 		tst	r3, #131072
 1210              	.L154:
 487:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1211              		.loc 1 487 0
 1212 0076 EDD0     		beq	.L119
 493:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Get Start Tick*/
 1213              		.loc 1 493 0
 1214 0078 2C4C     		ldr	r4, .L156+4
 1215 007a A368     		ldr	r3, [r4, #8]
 1216 007c 23F00303 		bic	r3, r3, #3
 1217 0080 1343     		orrs	r3, r3, r2
 1218 0082 A360     		str	r3, [r4, #8]
 495:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1219              		.loc 1 495 0
 1220 0084 FFF7FEFF 		bl	HAL_GetTick
 1221              	.LVL134:
 497:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1222              		.loc 1 497 0
 1223 0088 6B68     		ldr	r3, [r5, #4]
 1224 008a 012B     		cmp	r3, #1
 495:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1225              		.loc 1 495 0
 1226 008c 0646     		mov	r6, r0
 1227              	.LVL135:
 501:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1228              		.loc 1 501 0
 1229 008e 41F28837 		movw	r7, #5000
 497:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1230              		.loc 1 497 0
 1231 0092 15D1     		bne	.L150
 1232              	.LVL136:
 1233              	.L122:
 499:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1234              		.loc 1 499 0
 1235 0094 A368     		ldr	r3, [r4, #8]
 1236 0096 03F00C03 		and	r3, r3, #12
 1237 009a 042B     		cmp	r3, #4
 1238 009c BDD0     		beq	.L125
 501:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1239              		.loc 1 501 0
 1240 009e FFF7FEFF 		bl	HAL_GetTick
 1241              	.LVL137:
 1242 00a2 801B     		subs	r0, r0, r6
 1243 00a4 B842     		cmp	r0, r7
 1244 00a6 F5D9     		bls	.L122
 1245              	.L128:
 503:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 1246              		.loc 1 503 0
 1247 00a8 0320     		movs	r0, #3
 1248 00aa F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1249              	.LVL138:
 1250              	.L118:
 474:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 1251              		.loc 1 474 0
 1252 00ac 901E     		subs	r0, r2, #2
 1253 00ae 0128     		cmp	r0, #1
 478:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1254              		.loc 1 478 0
 1255 00b0 1B68     		ldr	r3, [r3]
 474:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 1256              		.loc 1 474 0
 1257 00b2 02D8     		bhi	.L121
 478:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1258              		.loc 1 478 0
 1259 00b4 13F0007F 		tst	r3, #33554432
 1260 00b8 DDE7     		b	.L154
 1261              	.L121:
 487:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1262              		.loc 1 487 0
 1263 00ba 13F0020F 		tst	r3, #2
 1264 00be DAE7     		b	.L154
 1265              	.LVL139:
 1266              	.L150:
 507:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1267              		.loc 1 507 0
 1268 00c0 022B     		cmp	r3, #2
 1269 00c2 0AD1     		bne	.L151
 1270              	.LVL140:
 1271              	.L126:
 509:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1272              		.loc 1 509 0
 1273 00c4 A368     		ldr	r3, [r4, #8]
 1274 00c6 03F00C03 		and	r3, r3, #12
 1275 00ca 082B     		cmp	r3, #8
 1276 00cc A5D0     		beq	.L125
 511:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1277              		.loc 1 511 0
 1278 00ce FFF7FEFF 		bl	HAL_GetTick
 1279              	.LVL141:
 1280 00d2 801B     		subs	r0, r0, r6
 1281 00d4 B842     		cmp	r0, r7
 1282 00d6 F5D9     		bls	.L126
 1283 00d8 E6E7     		b	.L128
 1284              	.LVL142:
 1285              	.L151:
 517:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1286              		.loc 1 517 0
 1287 00da 032B     		cmp	r3, #3
 1288 00dc 0FD1     		bne	.L131
 1289              	.LVL143:
 1290              	.L130:
 519:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1291              		.loc 1 519 0
 1292 00de A368     		ldr	r3, [r4, #8]
 1293 00e0 03F00C03 		and	r3, r3, #12
 1294 00e4 0C2B     		cmp	r3, #12
 1295 00e6 98D0     		beq	.L125
 521:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1296              		.loc 1 521 0
 1297 00e8 FFF7FEFF 		bl	HAL_GetTick
 1298              	.LVL144:
 1299 00ec 801B     		subs	r0, r0, r6
 1300 00ee B842     		cmp	r0, r7
 1301 00f0 F5D9     		bls	.L130
 1302 00f2 D9E7     		b	.L128
 1303              	.L133:
 531:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1304              		.loc 1 531 0
 1305 00f4 FFF7FEFF 		bl	HAL_GetTick
 1306              	.LVL145:
 1307 00f8 801B     		subs	r0, r0, r6
 1308 00fa B842     		cmp	r0, r7
 1309 00fc D4D8     		bhi	.L128
 1310              	.L131:
 529:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1311              		.loc 1 529 0
 1312 00fe A368     		ldr	r3, [r4, #8]
 1313 0100 13F00C0F 		tst	r3, #12
 1314 0104 F6D1     		bne	.L133
 1315 0106 88E7     		b	.L125
 1316              	.LVL146:
 1317              	.L116:
 543:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1318              		.loc 1 543 0
 1319 0108 CAB2     		uxtb	r2, r1
 1320 010a 1A70     		strb	r2, [r3]
 547:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1321              		.loc 1 547 0
 1322 010c 1B68     		ldr	r3, [r3]
 1323 010e 03F00F03 		and	r3, r3, #15
 1324 0112 9942     		cmp	r1, r3
 1325 0114 9ED1     		bne	.L119
 1326 0116 86E7     		b	.L117
 1327              	.L134:
 557:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 1328              		.loc 1 557 0
 1329 0118 044A     		ldr	r2, .L156+4
 1330 011a E968     		ldr	r1, [r5, #12]
 1331              	.LVL147:
 1332 011c 9368     		ldr	r3, [r2, #8]
 1333 011e 23F4E053 		bic	r3, r3, #7168
 1334 0122 0B43     		orrs	r3, r3, r1
 1335 0124 9360     		str	r3, [r2, #8]
 1336 0126 81E7     		b	.L135
 1337              	.L157:
 1338              		.align	2
 1339              	.L156:
 1340 0128 003C0240 		.word	1073888256
 1341 012c 00380240 		.word	1073887232
 1342              		.cfi_endproc
 1343              	.LFE127:
 1345              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1346              		.align	1
 1347              		.global	HAL_RCC_GetPCLK1Freq
 1348              		.syntax unified
 1349              		.thumb
 1350              		.thumb_func
 1351              		.fpu fpv4-sp-d16
 1353              	HAL_RCC_GetPCLK1Freq:
 1354              	.LFB144:
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 0
 1357              		@ frame_needed = 0, uses_anonymous_args = 0
 1358              		@ link register save eliminated.
 1359 0000 4FF4E100 		mov	r0, #7372800
 1360 0004 7047     		bx	lr
 1361              		.cfi_endproc
 1362              	.LFE144:
 1364              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1365              		.align	1
 1366              		.global	HAL_RCC_GetPCLK2Freq
 1367              		.syntax unified
 1368              		.thumb
 1369              		.thumb_func
 1370              		.fpu fpv4-sp-d16
 1372              	HAL_RCC_GetPCLK2Freq:
 1373              	.LFB129:
 596:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 1374              		.loc 1 596 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              		@ link register save eliminated.
 600:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1379              		.loc 1 600 0
 1380 0000 4FF4E100 		mov	r0, #7372800
 1381 0004 7047     		bx	lr
 1382              		.cfi_endproc
 1383              	.LFE129:
 1385              		.section	.text.HAL_GPIO_Init,"ax",%progbits
 1386              		.align	1
 1387              		.global	HAL_GPIO_Init
 1388              		.syntax unified
 1389              		.thumb
 1390              		.thumb_func
 1391              		.fpu fpv4-sp-d16
 1393              	HAL_GPIO_Init:
 1394              	.LFB130:
 623:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint32_t position;
 1395              		.loc 1 623 0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 16
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 1399              	.LVL148:
 1400 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1401              	.LCFI5:
 1402              		.cfi_def_cfa_offset 36
 1403              		.cfi_offset 4, -36
 1404              		.cfi_offset 5, -32
 1405              		.cfi_offset 6, -28
 1406              		.cfi_offset 7, -24
 1407              		.cfi_offset 8, -20
 1408              		.cfi_offset 9, -16
 1409              		.cfi_offset 10, -12
 1410              		.cfi_offset 11, -8
 1411              		.cfi_offset 14, -4
 1412 0004 85B0     		sub	sp, sp, #20
 1413              	.LCFI6:
 1414              		.cfi_def_cfa_offset 56
 641:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1415              		.loc 1 641 0
 1416 0006 0B68     		ldr	r3, [r1]
 1417              	.LBB149:
 694:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1418              		.loc 1 694 0
 1419 0008 DFF8AC81 		ldr	r8, .L188+8
 1420              	.LBE149:
 702:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 1421              		.loc 1 702 0
 1422 000c 684A     		ldr	r2, .L188
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1423              		.loc 1 698 0
 1424 000e DFF8AC91 		ldr	r9, .L188+12
 641:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1425              		.loc 1 641 0
 1426 0012 0193     		str	r3, [sp, #4]
 636:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1427              		.loc 1 636 0
 1428 0014 0023     		movs	r3, #0
 1429              	.LVL149:
 1430              	.L175:
 639:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Get the current IO position */
 1431              		.loc 1 639 0
 1432 0016 4FF0010E 		mov	lr, #1
 641:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1433              		.loc 1 641 0
 1434 001a 019C     		ldr	r4, [sp, #4]
 639:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Get the current IO position */
 1435              		.loc 1 639 0
 1436 001c 0EFA03FE 		lsl	lr, lr, r3
 1437              	.LVL150:
 641:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1438              		.loc 1 641 0
 1439 0020 0EEA0406 		and	r6, lr, r4
 1440              	.LVL151:
 643:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1441              		.loc 1 643 0
 1442 0024 B645     		cmp	lr, r6
 1443 0026 40F0AE80 		bne	.L162
 647:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1444              		.loc 1 647 0
 1445 002a 4C68     		ldr	r4, [r1, #4]
 1446 002c 24F01007 		bic	r7, r4, #16
 1447 0030 022F     		cmp	r7, #2
 1448 0032 16D1     		bne	.L163
 652:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 1449              		.loc 1 652 0
 1450 0034 4FEAD30A 		lsr	r10, r3, #3
 1451 0038 00EB8A0A 		add	r10, r0, r10, lsl #2
 653:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 1452              		.loc 1 653 0
 1453 003c 03F0070B 		and	fp, r3, #7
 652:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 1454              		.loc 1 652 0
 1455 0040 DAF82050 		ldr	r5, [r10, #32]
 1456              	.LVL152:
 653:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 1457              		.loc 1 653 0
 1458 0044 4FEA8B0B 		lsl	fp, fp, #2
 1459 0048 4FF00F0C 		mov	ip, #15
 1460 004c 0CFA0BFC 		lsl	ip, ip, fp
 1461 0050 25EA0C0C 		bic	ip, r5, ip
 1462              	.LVL153:
 654:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         GPIOx->AFR[position >> 3U] = temp;
 1463              		.loc 1 654 0
 1464 0054 0D69     		ldr	r5, [r1, #16]
 1465 0056 05FA0BF5 		lsl	r5, r5, fp
 1466 005a 45EA0C05 		orr	r5, r5, ip
 1467              	.LVL154:
 655:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 1468              		.loc 1 655 0
 1469 005e CAF82050 		str	r5, [r10, #32]
 1470              	.LVL155:
 1471              	.L163:
 1472 0062 4FEA430A 		lsl	r10, r3, #1
 660:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 1473              		.loc 1 660 0
 1474 0066 0325     		movs	r5, #3
 659:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 1475              		.loc 1 659 0
 1476 0068 D0F800B0 		ldr	fp, [r0]
 1477              	.LVL156:
 660:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 1478              		.loc 1 660 0
 1479 006c 05FA0AF5 		lsl	r5, r5, r10
 1480 0070 ED43     		mvns	r5, r5
 661:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       GPIOx->MODER = temp;
 1481              		.loc 1 661 0
 1482 0072 04F0030C 		and	ip, r4, #3
 660:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 1483              		.loc 1 660 0
 1484 0076 0BEA050B 		and	fp, fp, r5
 1485              	.LVL157:
 661:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       GPIOx->MODER = temp;
 1486              		.loc 1 661 0
 1487 007a 0CFA0AFC 		lsl	ip, ip, r10
 665:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 1488              		.loc 1 665 0
 1489 007e 013F     		subs	r7, r7, #1
 661:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       GPIOx->MODER = temp;
 1490              		.loc 1 661 0
 1491 0080 4CEA0B0C 		orr	ip, ip, fp
 1492              	.LVL158:
 665:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 1493              		.loc 1 665 0
 1494 0084 012F     		cmp	r7, #1
 662:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1495              		.loc 1 662 0
 1496 0086 C0F800C0 		str	ip, [r0]
 665:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 1497              		.loc 1 665 0
 1498 008a 11D8     		bhi	.L164
 671:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 1499              		.loc 1 671 0
 1500 008c 8768     		ldr	r7, [r0, #8]
 1501              	.LVL159:
 672:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= (GPIO_Init->Speed << (position * 2U));
 1502              		.loc 1 672 0
 1503 008e 07EA050B 		and	fp, r7, r5
 1504              	.LVL160:
 673:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         GPIOx->OSPEEDR = temp;
 1505              		.loc 1 673 0
 1506 0092 CF68     		ldr	r7, [r1, #12]
 1507 0094 07FA0AFC 		lsl	ip, r7, r10
 1508 0098 4CEA0B07 		orr	r7, ip, fp
 1509              	.LVL161:
 674:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1510              		.loc 1 674 0
 1511 009c 8760     		str	r7, [r0, #8]
 677:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 1512              		.loc 1 677 0
 1513 009e 4768     		ldr	r7, [r0, #4]
 1514              	.LVL162:
 678:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 1515              		.loc 1 678 0
 1516 00a0 27EA0E0E 		bic	lr, r7, lr
 1517              	.LVL163:
 679:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         GPIOx->OTYPER = temp;
 1518              		.loc 1 679 0
 1519 00a4 C4F30017 		ubfx	r7, r4, #4, #1
 1520 00a8 9F40     		lsls	r7, r7, r3
 1521 00aa 47EA0E07 		orr	r7, r7, lr
 1522              	.LVL164:
 680:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 1523              		.loc 1 680 0
 1524 00ae 4760     		str	r7, [r0, #4]
 1525              	.LVL165:
 1526              	.L164:
 684:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 1527              		.loc 1 684 0
 1528 00b0 C768     		ldr	r7, [r0, #12]
 1529              	.LVL166:
 685:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       temp |= ((GPIO_Init->Pull) << (position * 2U));
 1530              		.loc 1 685 0
 1531 00b2 3D40     		ands	r5, r5, r7
 1532              	.LVL167:
 686:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       GPIOx->PUPDR = temp;
 1533              		.loc 1 686 0
 1534 00b4 8F68     		ldr	r7, [r1, #8]
 1535 00b6 07FA0AF7 		lsl	r7, r7, r10
 1536 00ba 3D43     		orrs	r5, r5, r7
 1537              	.LVL168:
 687:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1538              		.loc 1 687 0
 1539 00bc C560     		str	r5, [r0, #12]
 691:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 1540              		.loc 1 691 0
 1541 00be E500     		lsls	r5, r4, #3
 1542              	.LVL169:
 1543 00c0 61D5     		bpl	.L162
 1544              	.LBB150:
 694:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1545              		.loc 1 694 0
 1546 00c2 4FF0000B 		mov	fp, #0
 1547 00c6 CDF80CB0 		str	fp, [sp, #12]
 1548              	.LVL170:
 1549 00ca D8F84470 		ldr	r7, [r8, #68]
 1550              	.LBE150:
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1551              		.loc 1 698 0
 1552 00ce 394D     		ldr	r5, .L188+4
 1553              	.LBB151:
 694:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1554              		.loc 1 694 0
 1555 00d0 47F48047 		orr	r7, r7, #16384
 1556 00d4 C8F84470 		str	r7, [r8, #68]
 1557 00d8 D8F84470 		ldr	r7, [r8, #68]
 1558 00dc 07F48047 		and	r7, r7, #16384
 1559 00e0 0397     		str	r7, [sp, #12]
 1560 00e2 039F     		ldr	r7, [sp, #12]
 1561 00e4 23F00307 		bic	r7, r3, #3
 1562 00e8 07F18047 		add	r7, r7, #1073741824
 1563 00ec 07F59C37 		add	r7, r7, #79872
 1564              	.LBE151:
 697:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 1565              		.loc 1 697 0
 1566 00f0 03F0030C 		and	ip, r3, #3
 696:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~(0x0FU << (4U * (position & 0x03U)));
 1567              		.loc 1 696 0
 1568 00f4 D7F808A0 		ldr	r10, [r7, #8]
 1569              	.LVL171:
 697:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 1570              		.loc 1 697 0
 1571 00f8 4FEA8C0C 		lsl	ip, ip, #2
 1572 00fc 4FF00F0E 		mov	lr, #15
 1573 0100 0EFA0CFE 		lsl	lr, lr, ip
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1574              		.loc 1 698 0
 1575 0104 A842     		cmp	r0, r5
 697:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 1576              		.loc 1 697 0
 1577 0106 2AEA0E0E 		bic	lr, r10, lr
 1578              	.LVL172:
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1579              		.loc 1 698 0
 1580 010a 43D0     		beq	.L176
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1581              		.loc 1 698 0 is_stmt 0 discriminator 1
 1582 010c 05F58065 		add	r5, r5, #1024
 1583 0110 A842     		cmp	r0, r5
 1584 0112 41D0     		beq	.L177
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1585              		.loc 1 698 0 discriminator 3
 1586 0114 05F58065 		add	r5, r5, #1024
 1587 0118 A842     		cmp	r0, r5
 1588 011a 3FD0     		beq	.L178
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1589              		.loc 1 698 0 discriminator 5
 1590 011c 05F58065 		add	r5, r5, #1024
 1591 0120 A842     		cmp	r0, r5
 1592 0122 3DD0     		beq	.L179
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1593              		.loc 1 698 0 discriminator 7
 1594 0124 05F58065 		add	r5, r5, #1024
 1595 0128 A842     		cmp	r0, r5
 1596 012a 3BD0     		beq	.L180
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1597              		.loc 1 698 0 discriminator 9
 1598 012c 4845     		cmp	r0, r9
 1599 012e 3BD0     		beq	.L181
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1600              		.loc 1 698 0 discriminator 11
 1601 0130 05F50065 		add	r5, r5, #2048
 1602 0134 A842     		cmp	r0, r5
 1603 0136 39D0     		beq	.L182
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1604              		.loc 1 698 0 discriminator 13
 1605 0138 05F58065 		add	r5, r5, #1024
 1606 013c A842     		cmp	r0, r5
 1607 013e 14BF     		ite	ne
 1608 0140 0825     		movne	r5, #8
 1609 0142 0725     		moveq	r5, #7
 1610              	.L166:
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1611              		.loc 1 698 0 discriminator 32
 1612 0144 05FA0CF5 		lsl	r5, r5, ip
 1613 0148 45EA0E05 		orr	r5, r5, lr
 1614              	.LVL173:
 699:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1615              		.loc 1 699 0 is_stmt 1 discriminator 32
 1616 014c BD60     		str	r5, [r7, #8]
 702:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 1617              		.loc 1 702 0 discriminator 32
 1618 014e 1568     		ldr	r5, [r2]
 1619              	.LVL174:
 703:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 1620              		.loc 1 703 0 discriminator 32
 1621 0150 F743     		mvns	r7, r6
 1622              	.LVL175:
 704:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1623              		.loc 1 704 0 discriminator 32
 1624 0152 14F4803F 		tst	r4, #65536
 703:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 1625              		.loc 1 703 0 discriminator 32
 1626 0156 0CBF     		ite	eq
 1627 0158 3D40     		andeq	r5, r5, r7
 1628              	.LVL176:
 706:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 1629              		.loc 1 706 0 discriminator 32
 1630 015a 3543     		orrne	r5, r5, r6
 1631              	.LVL177:
 708:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1632              		.loc 1 708 0 discriminator 32
 1633 015c 1560     		str	r5, [r2]
 710:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 1634              		.loc 1 710 0 discriminator 32
 1635 015e 5568     		ldr	r5, [r2, #4]
 1636              	.LVL178:
 712:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1637              		.loc 1 712 0 discriminator 32
 1638 0160 14F4003F 		tst	r4, #131072
 711:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 1639              		.loc 1 711 0 discriminator 32
 1640 0164 0CBF     		ite	eq
 1641 0166 3D40     		andeq	r5, r5, r7
 1642              	.LVL179:
 714:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 1643              		.loc 1 714 0 discriminator 32
 1644 0168 3543     		orrne	r5, r5, r6
 1645              	.LVL180:
 716:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1646              		.loc 1 716 0 discriminator 32
 1647 016a 5560     		str	r5, [r2, #4]
 719:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 1648              		.loc 1 719 0 discriminator 32
 1649 016c 9568     		ldr	r5, [r2, #8]
 1650              	.LVL181:
 721:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1651              		.loc 1 721 0 discriminator 32
 1652 016e 14F4801F 		tst	r4, #1048576
 720:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 1653              		.loc 1 720 0 discriminator 32
 1654 0172 0CBF     		ite	eq
 1655 0174 3D40     		andeq	r5, r5, r7
 1656              	.LVL182:
 723:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 1657              		.loc 1 723 0 discriminator 32
 1658 0176 3543     		orrne	r5, r5, r6
 1659              	.LVL183:
 725:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1660              		.loc 1 725 0 discriminator 32
 1661 0178 9560     		str	r5, [r2, #8]
 727:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 1662              		.loc 1 727 0 discriminator 32
 1663 017a D568     		ldr	r5, [r2, #12]
 1664              	.LVL184:
 729:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 1665              		.loc 1 729 0 discriminator 32
 1666 017c A402     		lsls	r4, r4, #10
 728:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 1667              		.loc 1 728 0 discriminator 32
 1668 017e 54BF     		ite	pl
 1669 0180 3D40     		andpl	r5, r5, r7
 1670              	.LVL185:
 731:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 1671              		.loc 1 731 0 discriminator 32
 1672 0182 3543     		orrmi	r5, r5, r6
 1673              	.LVL186:
 733:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 1674              		.loc 1 733 0 discriminator 32
 1675 0184 D560     		str	r5, [r2, #12]
 1676              	.LVL187:
 1677              	.L162:
 636:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1678              		.loc 1 636 0 discriminator 2
 1679 0186 0133     		adds	r3, r3, #1
 1680              	.LVL188:
 1681 0188 102B     		cmp	r3, #16
 1682 018a 7FF444AF 		bne	.L175
 737:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1683              		.loc 1 737 0
 1684 018e 05B0     		add	sp, sp, #20
 1685              	.LCFI7:
 1686              		.cfi_remember_state
 1687              		.cfi_def_cfa_offset 36
 1688              		@ sp needed
 1689 0190 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1690              	.LVL189:
 1691              	.L176:
 1692              	.LCFI8:
 1693              		.cfi_restore_state
 698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2U] = temp;
 1694              		.loc 1 698 0
 1695 0194 5D46     		mov	r5, fp
 1696 0196 D5E7     		b	.L166
 1697              	.L177:
 1698 0198 0125     		movs	r5, #1
 1699              	.LVL190:
 1700 019a D3E7     		b	.L166
 1701              	.LVL191:
 1702              	.L178:
 1703 019c 0225     		movs	r5, #2
 1704 019e D1E7     		b	.L166
 1705              	.L179:
 1706 01a0 0325     		movs	r5, #3
 1707 01a2 CFE7     		b	.L166
 1708              	.L180:
 1709 01a4 0425     		movs	r5, #4
 1710 01a6 CDE7     		b	.L166
 1711              	.L181:
 1712 01a8 0525     		movs	r5, #5
 1713 01aa CBE7     		b	.L166
 1714              	.L182:
 1715 01ac 0625     		movs	r5, #6
 1716 01ae C9E7     		b	.L166
 1717              	.L189:
 1718              		.align	2
 1719              	.L188:
 1720 01b0 003C0140 		.word	1073822720
 1721 01b4 00000240 		.word	1073872896
 1722 01b8 00380240 		.word	1073887232
 1723 01bc 00140240 		.word	1073878016
 1724              		.cfi_endproc
 1725              	.LFE130:
 1727              		.section	.text.HAL_GPIO_WritePin,"ax",%progbits
 1728              		.align	1
 1729              		.global	HAL_GPIO_WritePin
 1730              		.syntax unified
 1731              		.thumb
 1732              		.thumb_func
 1733              		.fpu fpv4-sp-d16
 1735              	HAL_GPIO_WritePin:
 1736              	.LFB131:
 757:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
 1737              		.loc 1 757 0
 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 0
 1740              		@ frame_needed = 0, uses_anonymous_args = 0
 1741              		@ link register save eliminated.
 1742              	.LVL192:
 762:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1743              		.loc 1 762 0
 1744 0000 0AB1     		cbz	r2, .L191
 1745              	.LVL193:
 1746              	.L193:
 768:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 1747              		.loc 1 768 0
 1748 0002 8161     		str	r1, [r0, #24]
 1749 0004 7047     		bx	lr
 1750              	.LVL194:
 1751              	.L191:
 1752 0006 0904     		lsls	r1, r1, #16
 1753              	.LVL195:
 1754 0008 FBE7     		b	.L193
 1755              		.cfi_endproc
 1756              	.LFE131:
 1758              		.section	.text.HAL_UART_Init,"ax",%progbits
 1759              		.align	1
 1760              		.global	HAL_UART_Init
 1761              		.syntax unified
 1762              		.thumb
 1763              		.thumb_func
 1764              		.fpu fpv4-sp-d16
 1766              	HAL_UART_Init:
 1767              	.LFB133:
 879:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the UART handle allocation */
 1768              		.loc 1 879 0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 0, uses_anonymous_args = 0
 1772              	.LVL196:
 1773 0000 30B5     		push	{r4, r5, lr}
 1774              	.LCFI9:
 1775              		.cfi_def_cfa_offset 12
 1776              		.cfi_offset 4, -12
 1777              		.cfi_offset 5, -8
 1778              		.cfi_offset 14, -4
 881:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1779              		.loc 1 881 0
 1780 0002 0028     		cmp	r0, #0
 1781 0004 74D0     		beq	.L203
 900:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1782              		.loc 1 900 0
 1783 0006 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1784 000a 03F0FF02 		and	r2, r3, #255
 1785 000e 0BB9     		cbnz	r3, .L196
 903:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Init the low level hardware */
 1786              		.loc 1 903 0
 1787 0010 80F83820 		strb	r2, [r0, #56]
 1788              	.L196:
 911:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1789              		.loc 1 911 0
 1790 0014 0168     		ldr	r1, [r0]
 1791              	.LBB154:
 1792              	.LBB155:
 796:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1793              		.loc 1 796 0
 1794 0016 C268     		ldr	r2, [r0, #12]
 813:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1795              		.loc 1 813 0
 1796 0018 0569     		ldr	r5, [r0, #16]
 1797 001a C469     		ldr	r4, [r0, #28]
 1798              	.LBE155:
 1799              	.LBE154:
 908:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1800              		.loc 1 908 0
 1801 001c 2423     		movs	r3, #36
 1802 001e 80F83930 		strb	r3, [r0, #57]
 911:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1803              		.loc 1 911 0
 1804 0022 CB68     		ldr	r3, [r1, #12]
 1805 0024 23F40053 		bic	r3, r3, #8192
 1806 0028 CB60     		str	r3, [r1, #12]
 1807              	.LVL197:
 1808              	.LBB158:
 1809              	.LBB156:
 790:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1810              		.loc 1 790 0
 1811 002a 0B69     		ldr	r3, [r1, #16]
 1812              	.LVL198:
 793:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1813              		.loc 1 793 0
 1814 002c 23F44053 		bic	r3, r3, #12288
 1815              	.LVL199:
 796:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1816              		.loc 1 796 0
 1817 0030 1343     		orrs	r3, r3, r2
 1818              	.LVL200:
 799:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1819              		.loc 1 799 0
 1820 0032 0B61     		str	r3, [r1, #16]
 813:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1821              		.loc 1 813 0
 1822 0034 8368     		ldr	r3, [r0, #8]
 1823              	.LVL201:
 802:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1824              		.loc 1 802 0
 1825 0036 CA68     		ldr	r2, [r1, #12]
 1826              	.LVL202:
 813:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1827              		.loc 1 813 0
 1828 0038 2B43     		orrs	r3, r3, r5
 1829 003a 4569     		ldr	r5, [r0, #20]
 805:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                    USART_CR1_RE | USART_CR1_OVER8));
 1830              		.loc 1 805 0
 1831 003c 22F41642 		bic	r2, r2, #38400
 1832              	.LVL203:
 813:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1833              		.loc 1 813 0
 1834 0040 2B43     		orrs	r3, r3, r5
 805:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****                                    USART_CR1_RE | USART_CR1_OVER8));
 1835              		.loc 1 805 0
 1836 0042 22F00C02 		bic	r2, r2, #12
 1837              	.LVL204:
 813:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1838              		.loc 1 813 0
 1839 0046 2343     		orrs	r3, r3, r4
 1840 0048 1343     		orrs	r3, r3, r2
 1841              	.LVL205:
 816:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1842              		.loc 1 816 0
 1843 004a CB60     		str	r3, [r1, #12]
 819:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1844              		.loc 1 819 0
 1845 004c 4B69     		ldr	r3, [r1, #20]
 1846              	.LVL206:
 825:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1847              		.loc 1 825 0
 1848 004e 8269     		ldr	r2, [r0, #24]
 822:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1849              		.loc 1 822 0
 1850 0050 23F44073 		bic	r3, r3, #768
 1851              	.LVL207:
 825:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1852              		.loc 1 825 0
 1853 0054 1343     		orrs	r3, r3, r2
 1854              	.LVL208:
 831:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1855              		.loc 1 831 0
 1856 0056 B4F5004F 		cmp	r4, #32768
 828:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1857              		.loc 1 828 0
 1858 005a 4B61     		str	r3, [r1, #20]
 1859 005c 4468     		ldr	r4, [r0, #4]
 1860 005e 254B     		ldr	r3, .L206
 1861              	.LVL209:
 831:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1862              		.loc 1 831 0
 1863 0060 36D1     		bne	.L197
 835:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1864              		.loc 1 835 0
 1865 0062 9942     		cmp	r1, r3
 837:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 1866              		.loc 1 837 0
 1867 0064 4FEA4404 		lsl	r4, r4, #1
 1868 0068 234A     		ldr	r2, .L206+4
 1869 006a B2FBF4F2 		udiv	r2, r2, r4
 1870 006e 4FF06404 		mov	r4, #100
 1871 0072 B2FBF4F5 		udiv	r5, r2, r4
 835:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1872              		.loc 1 835 0
 1873 0076 03D0     		beq	.L198
 1874 0078 03F58063 		add	r3, r3, #1024
 1875 007c 9942     		cmp	r1, r3
 1876 007e 23D1     		bne	.L199
 1877              	.L198:
 837:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 1878              		.loc 1 837 0
 1879 0080 04FB1522 		mls	r2, r4, r5, r2
 1880 0084 D300     		lsls	r3, r2, #3
 1881              	.L205:
 847:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 1882              		.loc 1 847 0
 1883 0086 3233     		adds	r3, r3, #50
 1884 0088 B3FBF4F3 		udiv	r3, r3, r4
 1885 008c 03F00702 		and	r2, r3, #7
 1886 0090 5B00     		lsls	r3, r3, #1
 1887 0092 02EB0512 		add	r2, r2, r5, lsl #4
 1888 0096 03F4F873 		and	r3, r3, #496
 1889 009a 1344     		add	r3, r3, r2
 1890              	.L204:
 866:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 1891              		.loc 1 866 0
 1892 009c 8B60     		str	r3, [r1, #8]
 1893              	.LVL210:
 1894              	.LBE156:
 1895              	.LBE158:
 919:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 1896              		.loc 1 919 0
 1897 009e 0B69     		ldr	r3, [r1, #16]
 1898 00a0 23F49043 		bic	r3, r3, #18432
 1899 00a4 0B61     		str	r3, [r1, #16]
 920:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1900              		.loc 1 920 0
 1901 00a6 4B69     		ldr	r3, [r1, #20]
 1902 00a8 23F02A03 		bic	r3, r3, #42
 1903 00ac 4B61     		str	r3, [r1, #20]
 923:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1904              		.loc 1 923 0
 1905 00ae CB68     		ldr	r3, [r1, #12]
 1906 00b0 43F40053 		orr	r3, r3, #8192
 1907 00b4 CB60     		str	r3, [r1, #12]
 927:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   huart->RxState= HAL_UART_STATE_READY;
 1908              		.loc 1 927 0
 1909 00b6 2022     		movs	r2, #32
 926:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   huart->gState= HAL_UART_STATE_READY;
 1910              		.loc 1 926 0
 1911 00b8 0023     		movs	r3, #0
 1912 00ba C363     		str	r3, [r0, #60]
 927:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   huart->RxState= HAL_UART_STATE_READY;
 1913              		.loc 1 927 0
 1914 00bc 80F83920 		strb	r2, [r0, #57]
 928:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1915              		.loc 1 928 0
 1916 00c0 80F83A20 		strb	r2, [r0, #58]
 930:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 1917              		.loc 1 930 0
 1918 00c4 1846     		mov	r0, r3
 1919              	.LVL211:
 1920 00c6 30BD     		pop	{r4, r5, pc}
 1921              	.LVL212:
 1922              	.L199:
 1923              	.LBB159:
 1924              	.LBB157:
 847:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 1925              		.loc 1 847 0
 1926 00c8 04FB1523 		mls	r3, r4, r5, r2
 1927 00cc DB00     		lsls	r3, r3, #3
 1928 00ce DAE7     		b	.L205
 1929              	.L197:
 866:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 1930              		.loc 1 866 0
 1931 00d0 A200     		lsls	r2, r4, #2
 1932 00d2 6424     		movs	r4, #100
 1933 00d4 084B     		ldr	r3, .L206+4
 1934 00d6 B3FBF2F2 		udiv	r2, r3, r2
 1935 00da B2FBF4F5 		udiv	r5, r2, r4
 1936 00de 04FB1523 		mls	r3, r4, r5, r2
 1937 00e2 1B01     		lsls	r3, r3, #4
 1938 00e4 3233     		adds	r3, r3, #50
 1939 00e6 B3FBF4F3 		udiv	r3, r3, r4
 1940 00ea 03EB0513 		add	r3, r3, r5, lsl #4
 1941 00ee D5E7     		b	.L204
 1942              	.LVL213:
 1943              	.L203:
 1944              	.LBE157:
 1945              	.LBE159:
 883:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 1946              		.loc 1 883 0
 1947 00f0 0120     		movs	r0, #1
 1948              	.LVL214:
 931:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1949              		.loc 1 931 0
 1950 00f2 30BD     		pop	{r4, r5, pc}
 1951              	.L207:
 1952              		.align	2
 1953              	.L206:
 1954 00f4 00100140 		.word	1073811456
 1955 00f8 0080FC0A 		.word	184320000
 1956              		.cfi_endproc
 1957              	.LFE133:
 1959              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 1960              		.align	1
 1961              		.global	HAL_UART_Transmit
 1962              		.syntax unified
 1963              		.thumb
 1964              		.thumb_func
 1965              		.fpu fpv4-sp-d16
 1967              	HAL_UART_Transmit:
 1968              	.LFB135:
 950:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint16_t* tmp;
 1969              		.loc 1 950 0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              		@ link register save eliminated.
 1974              	.LVL215:
 955:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 1975              		.loc 1 955 0
 1976 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1977              	.LVL216:
 1978 0004 202B     		cmp	r3, #32
 1979 0006 3CD1     		bne	.L221
 957:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1980              		.loc 1 957 0
 1981 0008 0029     		cmp	r1, #0
 1982 000a 38D0     		beq	.L220
 957:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 1983              		.loc 1 957 0 is_stmt 0 discriminator 1
 1984 000c 002A     		cmp	r2, #0
 1985 000e 36D0     		beq	.L220
 963:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1986              		.loc 1 963 0 is_stmt 1
 1987 0010 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1988 0014 012B     		cmp	r3, #1
 1989 0016 34D0     		beq	.L221
 963:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1990              		.loc 1 963 0 is_stmt 0 discriminator 2
 1991 0018 0123     		movs	r3, #1
 1992 001a 80F83830 		strb	r3, [r0, #56]
 965:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1993              		.loc 1 965 0 is_stmt 1 discriminator 2
 1994 001e 0023     		movs	r3, #0
 1995 0020 C363     		str	r3, [r0, #60]
 966:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 1996              		.loc 1 966 0 discriminator 2
 1997 0022 2123     		movs	r3, #33
 1998 0024 80F83930 		strb	r3, [r0, #57]
 971:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->TxXferCount = Size;
 1999              		.loc 1 971 0 discriminator 2
 2000 0028 8284     		strh	r2, [r0, #36]	@ movhi
 972:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     while(huart->TxXferCount > 0U)
 2001              		.loc 1 972 0 discriminator 2
 2002 002a C284     		strh	r2, [r0, #38]	@ movhi
 2003              	.LVL217:
 2004              	.L210:
 973:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 2005              		.loc 1 973 0
 2006 002c C28C     		ldrh	r2, [r0, #38]
 2007 002e 0368     		ldr	r3, [r0]
 2008 0030 92B2     		uxth	r2, r2
 2009 0032 52B9     		cbnz	r2, .L216
 2010              	.L217:
 2011              	.LBB166:
 2012              	.LBB167:
 936:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 2013              		.loc 1 936 0
 2014 0034 1A68     		ldr	r2, [r3]
 2015 0036 5206     		lsls	r2, r2, #25
 2016 0038 FCD5     		bpl	.L217
 2017              	.LBE167:
 2018              	.LBE166:
1009:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 2019              		.loc 1 1009 0
 2020 003a 2023     		movs	r3, #32
 2021 003c 80F83930 		strb	r3, [r0, #57]
1012:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 2022              		.loc 1 1012 0
 2023 0040 0023     		movs	r3, #0
 2024 0042 80F83830 		strb	r3, [r0, #56]
1014:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 2025              		.loc 1 1014 0
 2026 0046 1846     		mov	r0, r3
 2027              	.LVL218:
 2028 0048 7047     		bx	lr
 2029              	.LVL219:
 2030              	.L216:
 975:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 2031              		.loc 1 975 0
 2032 004a C28C     		ldrh	r2, [r0, #38]
 2033 004c 013A     		subs	r2, r2, #1
 2034 004e 92B2     		uxth	r2, r2
 2035 0050 C284     		strh	r2, [r0, #38]	@ movhi
 976:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 2036              		.loc 1 976 0
 2037 0052 8268     		ldr	r2, [r0, #8]
 2038 0054 B2F5805F 		cmp	r2, #4096
 2039 0058 0AD1     		bne	.L215
 2040              	.L212:
 2041              	.LBB168:
 2042              	.LBB169:
 936:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 2043              		.loc 1 936 0
 2044 005a 1A68     		ldr	r2, [r3]
 2045 005c 1206     		lsls	r2, r2, #24
 2046 005e FCD5     		bpl	.L212
 2047              	.LVL220:
 2048              	.LBE169:
 2049              	.LBE168:
 983:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 2050              		.loc 1 983 0
 2051 0060 0A88     		ldrh	r2, [r1]
 2052 0062 C2F30802 		ubfx	r2, r2, #0, #9
 2053 0066 5A60     		str	r2, [r3, #4]
 984:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 2054              		.loc 1 984 0
 2055 0068 0369     		ldr	r3, [r0, #16]
 2056 006a 33B9     		cbnz	r3, .L228
 986:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 2057              		.loc 1 986 0
 2058 006c 0231     		adds	r1, r1, #2
 2059              	.LVL221:
 2060 006e DDE7     		b	.L210
 2061              	.LVL222:
 2062              	.L215:
 2063              	.LBB170:
 2064              	.LBB171:
 936:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 2065              		.loc 1 936 0
 2066 0070 1A68     		ldr	r2, [r3]
 2067 0072 1206     		lsls	r2, r2, #24
 2068 0074 FCD5     		bpl	.L215
 2069              	.LVL223:
 2070              	.LBE171:
 2071              	.LBE170:
 999:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
 2072              		.loc 1 999 0
 2073 0076 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 2074 0078 5A60     		str	r2, [r3, #4]
 2075              	.LVL224:
 2076              	.L228:
 2077 007a 0131     		adds	r1, r1, #1
 2078 007c D6E7     		b	.L210
 2079              	.LVL225:
 2080              	.L220:
 959:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 2081              		.loc 1 959 0
 2082 007e 0120     		movs	r0, #1
 2083              	.LVL226:
 2084 0080 7047     		bx	lr
 2085              	.LVL227:
 2086              	.L221:
1018:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 2087              		.loc 1 1018 0
 2088 0082 0220     		movs	r0, #2
 2089              	.LVL228:
1020:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 2090              		.loc 1 1020 0
 2091 0084 7047     		bx	lr
 2092              		.cfi_endproc
 2093              	.LFE135:
 2095              		.section	.text.HAL_UART_Receive,"ax",%progbits
 2096              		.align	1
 2097              		.global	HAL_UART_Receive
 2098              		.syntax unified
 2099              		.thumb
 2100              		.thumb_func
 2101              		.fpu fpv4-sp-d16
 2103              	HAL_UART_Receive:
 2104              	.LFB136:
1034:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint16_t* tmp;
 2105              		.loc 1 1034 0
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 0
 2108              		@ frame_needed = 0, uses_anonymous_args = 0
 2109              	.LVL229:
1039:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 2110              		.loc 1 1039 0
 2111 0000 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 2112              	.LVL230:
 2113 0004 202B     		cmp	r3, #32
1034:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   uint16_t* tmp;
 2114              		.loc 1 1034 0
 2115 0006 10B5     		push	{r4, lr}
 2116              	.LCFI10:
 2117              		.cfi_def_cfa_offset 8
 2118              		.cfi_offset 4, -8
 2119              		.cfi_offset 14, -4
1039:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
 2120              		.loc 1 1039 0
 2121 0008 42D1     		bne	.L242
1041:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 2122              		.loc 1 1041 0
 2123 000a 0029     		cmp	r1, #0
 2124 000c 3ED0     		beq	.L241
1041:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 2125              		.loc 1 1041 0 is_stmt 0 discriminator 1
 2126 000e 002A     		cmp	r2, #0
 2127 0010 3CD0     		beq	.L241
1047:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 2128              		.loc 1 1047 0 is_stmt 1
 2129 0012 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 2130 0016 012B     		cmp	r3, #1
 2131 0018 3AD0     		beq	.L242
1047:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 2132              		.loc 1 1047 0 is_stmt 0 discriminator 2
 2133 001a 0123     		movs	r3, #1
 2134 001c 80F83830 		strb	r3, [r0, #56]
1049:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 2135              		.loc 1 1049 0 is_stmt 1 discriminator 2
 2136 0020 0023     		movs	r3, #0
 2137 0022 C363     		str	r3, [r0, #60]
1050:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 2138              		.loc 1 1050 0 discriminator 2
 2139 0024 2223     		movs	r3, #34
 2140 0026 80F83A30 		strb	r3, [r0, #58]
1055:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     huart->RxXferCount = Size;
 2141              		.loc 1 1055 0 discriminator 2
 2142 002a 8285     		strh	r2, [r0, #44]	@ movhi
1056:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 2143              		.loc 1 1056 0 discriminator 2
 2144 002c C285     		strh	r2, [r0, #46]	@ movhi
 2145              	.LVL231:
 2146              	.L231:
1059:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
 2147              		.loc 1 1059 0
 2148 002e C38D     		ldrh	r3, [r0, #46]
 2149 0030 9BB2     		uxth	r3, r3
 2150 0032 33B9     		cbnz	r3, .L238
1100:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 2151              		.loc 1 1100 0
 2152 0034 2022     		movs	r2, #32
 2153 0036 80F83A20 		strb	r2, [r0, #58]
1103:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 2154              		.loc 1 1103 0
 2155 003a 80F83830 		strb	r3, [r0, #56]
1105:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 2156              		.loc 1 1105 0
 2157 003e 1846     		mov	r0, r3
 2158              	.LVL232:
 2159 0040 10BD     		pop	{r4, pc}
 2160              	.LVL233:
 2161              	.L238:
1061:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 2162              		.loc 1 1061 0
 2163 0042 C38D     		ldrh	r3, [r0, #46]
 2164 0044 013B     		subs	r3, r3, #1
 2165 0046 9BB2     		uxth	r3, r3
 2166 0048 C385     		strh	r3, [r0, #46]	@ movhi
1062:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 2167              		.loc 1 1062 0
 2168 004a 8368     		ldr	r3, [r0, #8]
 2169 004c B3F5805F 		cmp	r3, #4096
 2170 0050 0368     		ldr	r3, [r0]
 2171 0052 0ED1     		bne	.L236
 2172              	.L233:
 2173              	.LBB176:
 2174              	.LBB177:
 936:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 2175              		.loc 1 936 0
 2176 0054 1A68     		ldr	r2, [r3]
 2177 0056 9406     		lsls	r4, r2, #26
 2178 0058 FCD5     		bpl	.L233
 2179              	.LVL234:
 2180              	.LBE177:
 2181              	.LBE176:
1069:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 2182              		.loc 1 1069 0
 2183 005a 0269     		ldr	r2, [r0, #16]
1071:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           pData +=2U;
 2184              		.loc 1 1071 0
 2185 005c 5B68     		ldr	r3, [r3, #4]
1069:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 2186              		.loc 1 1069 0
 2187 005e 22B9     		cbnz	r2, .L234
1071:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           pData +=2U;
 2188              		.loc 1 1071 0
 2189 0060 C3F30803 		ubfx	r3, r3, #0, #9
 2190 0064 21F8023B 		strh	r3, [r1], #2	@ movhi
 2191              	.LVL235:
 2192 0068 E1E7     		b	.L231
 2193              	.LVL236:
 2194              	.L234:
1076:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           pData +=1U;
 2195              		.loc 1 1076 0
 2196 006a DBB2     		uxtb	r3, r3
 2197 006c 21F8013B 		strh	r3, [r1], #1	@ movhi
 2198              	.LVL237:
 2199 0070 DDE7     		b	.L231
 2200              	.LVL238:
 2201              	.L236:
 2202              	.LBB178:
 2203              	.LBB179:
 936:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 2204              		.loc 1 936 0
 2205 0072 1A68     		ldr	r2, [r3]
 2206 0074 9206     		lsls	r2, r2, #26
 2207 0076 FCD5     		bpl	.L236
 2208              	.LBE179:
 2209              	.LBE178:
1087:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 2210              		.loc 1 1087 0
 2211 0078 0469     		ldr	r4, [r0, #16]
1089:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 2212              		.loc 1 1089 0
 2213 007a 5B68     		ldr	r3, [r3, #4]
 2214 007c 4A1C     		adds	r2, r1, #1
1087:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 2215              		.loc 1 1087 0
 2216 007e 14B9     		cbnz	r4, .L237
 2217              	.LVL239:
 2218              	.L247:
1093:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
 2219              		.loc 1 1093 0
 2220 0080 0B70     		strb	r3, [r1]
 2221 0082 1146     		mov	r1, r2
 2222 0084 D3E7     		b	.L231
 2223              	.LVL240:
 2224              	.L237:
 2225 0086 03F07F03 		and	r3, r3, #127
 2226 008a F9E7     		b	.L247
 2227              	.LVL241:
 2228              	.L241:
1043:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 2229              		.loc 1 1043 0
 2230 008c 0120     		movs	r0, #1
 2231              	.LVL242:
 2232 008e 10BD     		pop	{r4, pc}
 2233              	.LVL243:
 2234              	.L242:
1109:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 2235              		.loc 1 1109 0
 2236 0090 0220     		movs	r0, #2
 2237              	.LVL244:
1111:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
 2238              		.loc 1 1111 0
 2239 0092 10BD     		pop	{r4, pc}
 2240              		.cfi_endproc
 2241              	.LFE136:
 2243              		.section	.text.HAL_CRYP_Init,"ax",%progbits
 2244              		.align	1
 2245              		.global	HAL_CRYP_Init
 2246              		.syntax unified
 2247              		.thumb
 2248              		.thumb_func
 2249              		.fpu fpv4-sp-d16
 2251              	HAL_CRYP_Init:
 2252              	.LFB139:
1636:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1637:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
1638:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** { 
 2253              		.loc 1 1638 0
 2254              		.cfi_startproc
 2255              		@ args = 0, pretend = 0, frame = 0
 2256              		@ frame_needed = 0, uses_anonymous_args = 0
 2257              		@ link register save eliminated.
 2258              	.LVL245:
1639:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the CRYP handle allocation */
1640:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(hcryp == NULL)
 2259              		.loc 1 1640 0
 2260 0000 C0B1     		cbz	r0, .L251
1641:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
1642:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     return HAL_ERROR;
1643:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1644:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1645:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the parameters */
1646:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_CRYP_KEYSIZE(hcryp->Init.KeySize));
1647:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   assert_param(IS_CRYP_DATATYPE(hcryp->Init.DataType));
1648:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1649:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(hcryp->State == HAL_CRYP_STATE_RESET)
 2261              		.loc 1 1649 0
 2262 0002 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 2263 0006 03F0FF02 		and	r2, r3, #255
 2264 000a 0BB9     		cbnz	r3, .L250
1650:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
1651:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Allocate lock resource and initialize it */
1652:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Lock = HAL_UNLOCKED;
 2265              		.loc 1 1652 0
 2266 000c 80F83C20 		strb	r2, [r0, #60]
 2267              	.L250:
1653:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Init the low level hardware */
1654:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     //HAL_CRYP_MspInit(hcryp);
1655:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1656:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1657:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Change the CRYP state */
1658:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->State = HAL_CRYP_STATE_BUSY;
 2268              		.loc 1 1658 0
 2269 0010 0223     		movs	r3, #2
 2270 0012 80F83D30 		strb	r3, [r0, #61]
1659:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1660:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Set the key size and data type*/
1661:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   CRYP->CR = (uint32_t) (hcryp->Init.KeySize | hcryp->Init.DataType);
 2271              		.loc 1 1661 0
 2272 0016 4268     		ldr	r2, [r0, #4]
 2273 0018 8368     		ldr	r3, [r0, #8]
 2274 001a 1343     		orrs	r3, r3, r2
 2275 001c 064A     		ldr	r2, .L252
 2276 001e 1360     		str	r3, [r2]
1662:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1663:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Reset CrypInCount and CrypOutCount */
1664:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->CrypInCount = 0U;
 2277              		.loc 1 1664 0
 2278 0020 0023     		movs	r3, #0
1665:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->CrypOutCount = 0U;
1666:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1667:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Change the CRYP state */
1668:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->State = HAL_CRYP_STATE_READY;
 2279              		.loc 1 1668 0
 2280 0022 0122     		movs	r2, #1
1664:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->CrypOutCount = 0U;
 2281              		.loc 1 1664 0
 2282 0024 8385     		strh	r3, [r0, #44]	@ movhi
1669:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1670:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Set the default CRYP phase */
1671:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->Phase = HAL_CRYP_PHASE_READY;
 2283              		.loc 1 1671 0
 2284 0026 80F83120 		strb	r2, [r0, #49]
1665:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
 2285              		.loc 1 1665 0
 2286 002a C385     		strh	r3, [r0, #46]	@ movhi
1668:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
 2287              		.loc 1 1668 0
 2288 002c 80F83D20 		strb	r2, [r0, #61]
1672:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1673:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Return function status */
1674:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 2289              		.loc 1 1674 0
 2290 0030 1846     		mov	r0, r3
 2291              	.LVL246:
 2292 0032 7047     		bx	lr
 2293              	.LVL247:
 2294              	.L251:
1642:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 2295              		.loc 1 1642 0
 2296 0034 0120     		movs	r0, #1
 2297              	.LVL248:
1675:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 2298              		.loc 1 1675 0
 2299 0036 7047     		bx	lr
 2300              	.L253:
 2301              		.align	2
 2302              	.L252:
 2303 0038 00000650 		.word	1342570496
 2304              		.cfi_endproc
 2305              	.LFE139:
 2307              		.section	.text.HAL_CRYP_DeInit,"ax",%progbits
 2308              		.align	1
 2309              		.global	HAL_CRYP_DeInit
 2310              		.syntax unified
 2311              		.thumb
 2312              		.thumb_func
 2313              		.fpu fpv4-sp-d16
 2315              	HAL_CRYP_DeInit:
 2316              	.LFB140:
1676:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1677:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
1678:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  DeInitializes the CRYP peripheral. 
1679:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
1680:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         the configuration information for CRYP module
1681:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval HAL status
1682:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
1683:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
1684:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 2317              		.loc 1 1684 0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 0
 2320              		@ frame_needed = 0, uses_anonymous_args = 0
 2321              		@ link register save eliminated.
 2322              	.LVL249:
 2323 0000 0123     		movs	r3, #1
1685:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check the CRYP handle allocation */
1686:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(hcryp == NULL)
 2324              		.loc 1 1686 0
 2325 0002 80B1     		cbz	r0, .L256
1687:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
1688:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     return HAL_ERROR;
1689:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1690:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1691:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Change the CRYP state */
1692:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->State = HAL_CRYP_STATE_BUSY;
 2326              		.loc 1 1692 0
 2327 0004 0222     		movs	r2, #2
1693:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1694:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Set the default CRYP phase */
1695:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->Phase = HAL_CRYP_PHASE_READY;
 2328              		.loc 1 1695 0
 2329 0006 80F83130 		strb	r3, [r0, #49]
1696:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1697:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Reset CrypInCount and CrypOutCount */
1698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->CrypInCount = 0U;
1699:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->CrypOutCount = 0U;
1700:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1701:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Disable the CRYP Peripheral Clock */
1702:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   __HAL_CRYP_DISABLE(hcryp);
 2330              		.loc 1 1702 0
 2331 000a 0168     		ldr	r1, [r0]
1692:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
 2332              		.loc 1 1692 0
 2333 000c 80F83D20 		strb	r2, [r0, #61]
1698:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->CrypOutCount = 0U;
 2334              		.loc 1 1698 0
 2335 0010 0023     		movs	r3, #0
 2336 0012 8385     		strh	r3, [r0, #44]	@ movhi
1699:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
 2337              		.loc 1 1699 0
 2338 0014 C385     		strh	r3, [r0, #46]	@ movhi
 2339              		.loc 1 1702 0
 2340 0016 0A68     		ldr	r2, [r1]
 2341 0018 22F40042 		bic	r2, r2, #32768
 2342 001c 0A60     		str	r2, [r1]
1703:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1704:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* DeInit the low level hardware: CLOCK, NVIC.*/
1705:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   //HAL_CRYP_MspDeInit(hcryp);
1706:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1707:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Change the CRYP state */
1708:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->State = HAL_CRYP_STATE_RESET;
 2343              		.loc 1 1708 0
 2344 001e 80F83D30 		strb	r3, [r0, #61]
1709:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1710:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Release Lock */
1711:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   __HAL_UNLOCK(hcryp);
 2345              		.loc 1 1711 0
 2346 0022 80F83C30 		strb	r3, [r0, #60]
 2347              	.L256:
1688:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
 2348              		.loc 1 1688 0
 2349 0026 1846     		mov	r0, r3
 2350              	.LVL250:
1712:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1713:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Return function status */
1714:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
1715:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 2351              		.loc 1 1715 0
 2352 0028 7047     		bx	lr
 2353              		.cfi_endproc
 2354              	.LFE140:
 2356              		.section	.text.HAL_CRYP_AESECB_Encrypt,"ax",%progbits
 2357              		.align	1
 2358              		.global	HAL_CRYP_AESECB_Encrypt
 2359              		.syntax unified
 2360              		.thumb
 2361              		.thumb_func
 2362              		.fpu fpv4-sp-d16
 2364              	HAL_CRYP_AESECB_Encrypt:
 2365              	.LFB141:
1716:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1717:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** HAL_StatusTypeDef HAL_CRYP_AESECB_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t 
1718:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 2366              		.loc 1 1718 0
 2367              		.cfi_startproc
 2368              		@ args = 4, pretend = 0, frame = 0
 2369              		@ frame_needed = 0, uses_anonymous_args = 0
 2370              	.LVL251:
 2371 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 2372              	.LCFI11:
 2373              		.cfi_def_cfa_offset 32
 2374              		.cfi_offset 4, -24
 2375              		.cfi_offset 5, -20
 2376              		.cfi_offset 6, -16
 2377              		.cfi_offset 7, -12
 2378              		.cfi_offset 8, -8
 2379              		.cfi_offset 14, -4
 2380              		.loc 1 1718 0
 2381 0004 9846     		mov	r8, r3
1719:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Process Locked */
1720:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   __HAL_LOCK(hcryp);
 2382              		.loc 1 1720 0
 2383 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2384              	.LVL252:
 2385 000a 012B     		cmp	r3, #1
1718:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Process Locked */
 2386              		.loc 1 1718 0
 2387 000c 0446     		mov	r4, r0
 2388 000e 0E46     		mov	r6, r1
 2389 0010 1746     		mov	r7, r2
 2390 0012 4FF00205 		mov	r5, #2
 2391              		.loc 1 1720 0
 2392 0016 2CD0     		beq	.L260
 2393              		.loc 1 1720 0 is_stmt 0 discriminator 2
 2394 0018 0123     		movs	r3, #1
 2395 001a 80F83C30 		strb	r3, [r0, #60]
1721:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1722:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Change the CRYP state */
1723:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->State = HAL_CRYP_STATE_BUSY;
1724:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1725:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check if initialization phase has already been performed */
1726:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(hcryp->Phase == HAL_CRYP_PHASE_READY)
 2396              		.loc 1 1726 0 is_stmt 1 discriminator 2
 2397 001e 90F83130 		ldrb	r3, [r0, #49]	@ zero_extendqisi2
1723:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
 2398              		.loc 1 1723 0 discriminator 2
 2399 0022 80F83D50 		strb	r5, [r0, #61]
 2400              		.loc 1 1726 0 discriminator 2
 2401 0026 012B     		cmp	r3, #1
 2402 0028 12D1     		bne	.L259
1727:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
1728:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Set the key */
1729:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     CRYP_SetKey(hcryp, hcryp->Init.pKey, hcryp->Init.KeySize);
 2403              		.loc 1 1729 0
 2404 002a 8268     		ldr	r2, [r0, #8]
 2405              	.LVL253:
 2406 002c C168     		ldr	r1, [r0, #12]
 2407              	.LVL254:
 2408 002e FFF7FEFF 		bl	CRYP_SetKey
 2409              	.LVL255:
1730:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1731:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Set the CRYP peripheral in AES ECB mode */
1732:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_CRYP_SET_MODE(hcryp, CRYP_CR_ALGOMODE_AES_ECB);
 2410              		.loc 1 1732 0
 2411 0032 0268     		ldr	r2, [r0]
 2412 0034 1368     		ldr	r3, [r2]
 2413 0036 43F02003 		orr	r3, r3, #32
 2414 003a 1360     		str	r3, [r2]
1733:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1734:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Flush FIFO */
1735:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_CRYP_FIFO_FLUSH(hcryp);
 2415              		.loc 1 1735 0
 2416 003c 1168     		ldr	r1, [r2]
 2417 003e 41F48041 		orr	r1, r1, #16384
 2418 0042 1160     		str	r1, [r2]
1736:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1737:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Enable CRYP */
1738:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_CRYP_ENABLE(hcryp);
 2419              		.loc 1 1738 0
 2420 0044 1168     		ldr	r1, [r2]
 2421 0046 41F40041 		orr	r1, r1, #32768
 2422 004a 1160     		str	r1, [r2]
1739:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1740:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Set the phase */
1741:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Phase = HAL_CRYP_PHASE_PROCESS;
 2423              		.loc 1 1741 0
 2424 004c 80F83150 		strb	r5, [r0, #49]
 2425              	.L259:
1742:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1743:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1744:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Write Plain Data and Get Cypher Data */
1745:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if(CRYP_ProcessData(hcryp, pPlainData, Size, pCypherData, Timeout) != HAL_OK)
 2426              		.loc 1 1745 0
 2427 0050 089B     		ldr	r3, [sp, #32]
 2428 0052 0093     		str	r3, [sp]
 2429 0054 3A46     		mov	r2, r7
 2430 0056 4346     		mov	r3, r8
 2431 0058 3146     		mov	r1, r6
 2432 005a 2046     		mov	r0, r4
 2433              	.LVL256:
 2434 005c FFF7FEFF 		bl	CRYP_ProcessData
 2435              	.LVL257:
 2436 0060 48B9     		cbnz	r0, .L261
1746:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
1747:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       return HAL_TIMEOUT;
1748:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
1749:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1750:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Change the CRYP state */
1751:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->State = HAL_CRYP_STATE_READY;
 2437              		.loc 1 1751 0
 2438 0062 0123     		movs	r3, #1
 2439 0064 84F83D30 		strb	r3, [r4, #61]
1752:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1753:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Process Unlocked */
1754:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   __HAL_UNLOCK(hcryp);
 2440              		.loc 1 1754 0
 2441 0068 84F83C00 		strb	r0, [r4, #60]
 2442              	.L258:
1755:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1756:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Return function status */
1757:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
1758:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 2443              		.loc 1 1758 0
 2444 006c 02B0     		add	sp, sp, #8
 2445              	.LCFI12:
 2446              		.cfi_remember_state
 2447              		.cfi_def_cfa_offset 24
 2448              		@ sp needed
 2449 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2450              	.LVL258:
 2451              	.L260:
 2452              	.LCFI13:
 2453              		.cfi_restore_state
1720:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
 2454              		.loc 1 1720 0
 2455 0072 2846     		mov	r0, r5
 2456              	.LVL259:
 2457 0074 FAE7     		b	.L258
 2458              	.LVL260:
 2459              	.L261:
1747:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 2460              		.loc 1 1747 0
 2461 0076 0320     		movs	r0, #3
 2462 0078 F8E7     		b	.L258
 2463              		.cfi_endproc
 2464              	.LFE141:
 2466              		.section	.text.HAL_CRYP_AESECB_Decrypt,"ax",%progbits
 2467              		.align	1
 2468              		.global	HAL_CRYP_AESECB_Decrypt
 2469              		.syntax unified
 2470              		.thumb
 2471              		.thumb_func
 2472              		.fpu fpv4-sp-d16
 2474              	HAL_CRYP_AESECB_Decrypt:
 2475              	.LFB142:
1759:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1760:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** /**
1761:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @brief  Initializes the CRYP peripheral in AES ECB decryption mode
1762:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         then decrypted pCypherData. The cypher data are available in pPlainData
1763:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
1764:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   *         the configuration information for CRYP module
1765:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  pCypherData Pointer to the cyphertext buffer
1766:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Size Length of the plaintext buffer, must be a multiple of 16.
1767:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  pPlainData Pointer to the plaintext buffer
1768:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @param  Timeout Specify Timeout value  
1769:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   * @retval HAL status
1770:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   */
1771:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** HAL_StatusTypeDef HAL_CRYP_AESECB_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t
1772:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** {
 2476              		.loc 1 1772 0
 2477              		.cfi_startproc
 2478              		@ args = 4, pretend = 0, frame = 0
 2479              		@ frame_needed = 0, uses_anonymous_args = 0
 2480              	.LVL261:
 2481 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 2482              	.LCFI14:
 2483              		.cfi_def_cfa_offset 32
 2484              		.cfi_offset 4, -24
 2485              		.cfi_offset 5, -20
 2486              		.cfi_offset 6, -16
 2487              		.cfi_offset 7, -12
 2488              		.cfi_offset 8, -8
 2489              		.cfi_offset 14, -4
 2490              		.loc 1 1772 0
 2491 0004 9846     		mov	r8, r3
1773:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****    uint32_t tickstart = 0U;
1774:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1775:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Process Locked */
1776:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   __HAL_LOCK(hcryp);
 2492              		.loc 1 1776 0
 2493 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2494              	.LVL262:
1772:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****    uint32_t tickstart = 0U;
 2495              		.loc 1 1772 0
 2496 000a 089D     		ldr	r5, [sp, #32]
 2497              		.loc 1 1776 0
 2498 000c 012B     		cmp	r3, #1
1772:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****    uint32_t tickstart = 0U;
 2499              		.loc 1 1772 0
 2500 000e 0446     		mov	r4, r0
 2501 0010 0E46     		mov	r6, r1
 2502 0012 1746     		mov	r7, r2
 2503 0014 4FF00203 		mov	r3, #2
 2504              		.loc 1 1776 0
 2505 0018 56D0     		beq	.L270
1777:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1778:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Change the CRYP state */
1779:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->State = HAL_CRYP_STATE_BUSY;
 2506              		.loc 1 1779 0 discriminator 2
 2507 001a 80F83D30 		strb	r3, [r0, #61]
1780:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1781:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Check if initialization phase has already been performed */
1782:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   if(hcryp->Phase == HAL_CRYP_PHASE_READY)
 2508              		.loc 1 1782 0 discriminator 2
 2509 001e 90F83130 		ldrb	r3, [r0, #49]	@ zero_extendqisi2
1776:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
 2510              		.loc 1 1776 0 discriminator 2
 2511 0022 0122     		movs	r2, #1
 2512              	.LVL263:
 2513              		.loc 1 1782 0 discriminator 2
 2514 0024 9342     		cmp	r3, r2
1776:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
 2515              		.loc 1 1776 0 discriminator 2
 2516 0026 80F83C20 		strb	r2, [r0, #60]
 2517              		.loc 1 1782 0 discriminator 2
 2518 002a 2DD1     		bne	.L264
1783:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   {
1784:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Set the key */
1785:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     CRYP_SetKey(hcryp, hcryp->Init.pKey, hcryp->Init.KeySize);
 2519              		.loc 1 1785 0
 2520 002c 8268     		ldr	r2, [r0, #8]
 2521 002e C168     		ldr	r1, [r0, #12]
 2522              	.LVL264:
 2523 0030 FFF7FEFF 		bl	CRYP_SetKey
 2524              	.LVL265:
1786:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1787:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Set the CRYP peripheral in AES Key mode */
1788:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_CRYP_SET_MODE(hcryp, CRYP_CR_ALGOMODE_AES_KEY | CRYP_CR_ALGODIR);
 2525              		.loc 1 1788 0
 2526 0034 0368     		ldr	r3, [r0]
 2527 0036 1A68     		ldr	r2, [r3]
 2528 0038 42F03C02 		orr	r2, r2, #60
 2529 003c 1A60     		str	r2, [r3]
1789:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1790:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Enable CRYP */
1791:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_CRYP_ENABLE(hcryp);
 2530              		.loc 1 1791 0
 2531 003e 1A68     		ldr	r2, [r3]
 2532 0040 42F40042 		orr	r2, r2, #32768
 2533 0044 1A60     		str	r2, [r3]
1792:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1793:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Get tick */ 
1794:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 2534              		.loc 1 1794 0
 2535 0046 FFF7FEFF 		bl	HAL_GetTick
 2536              	.LVL266:
 2537 004a 0146     		mov	r1, r0
 2538              	.LVL267:
 2539              	.L265:
1795:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** 
1796:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     while(HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 2540              		.loc 1 1796 0
 2541 004c 2368     		ldr	r3, [r4]
 2542              	.L266:
 2543 004e 5A68     		ldr	r2, [r3, #4]
 2544 0050 D206     		lsls	r2, r2, #27
 2545 0052 27D4     		bmi	.L269
1797:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
1798:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       /* Check for the Timeout */
1799:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       if(Timeout != HAL_MAX_DELAY)
1800:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
1801:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
1802:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
1803:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           /* Change state */
1804:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           hcryp->State = HAL_CRYP_STATE_TIMEOUT;
1805:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           
1806:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           /* Process Unlocked */          
1807:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           __HAL_UNLOCK(hcryp);
1808:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         
1809:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           return HAL_TIMEOUT;
1810:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         }
1811:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       }
1812:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
1813:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1814:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Disable CRYP */
1815:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_CRYP_DISABLE(hcryp);
 2546              		.loc 1 1815 0
 2547 0054 1A68     		ldr	r2, [r3]
1816:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1817:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Reset the ALGOMODE bits*/
1818:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     CRYP->CR &= (uint32_t)(~CRYP_CR_ALGOMODE);
 2548              		.loc 1 1818 0
 2549 0056 1E49     		ldr	r1, .L274
 2550              	.LVL268:
1815:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
 2551              		.loc 1 1815 0
 2552 0058 22F40042 		bic	r2, r2, #32768
 2553 005c 1A60     		str	r2, [r3]
 2554              		.loc 1 1818 0
 2555 005e 0A68     		ldr	r2, [r1]
 2556 0060 22F40022 		bic	r2, r2, #524288
 2557 0064 22F03802 		bic	r2, r2, #56
 2558 0068 0A60     		str	r2, [r1]
 2559              	.LVL269:
1819:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1820:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Set the CRYP peripheral in AES ECB decryption mode */
1821:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_CRYP_SET_MODE(hcryp, CRYP_CR_ALGOMODE_AES_ECB | CRYP_CR_ALGODIR);
 2560              		.loc 1 1821 0
 2561 006a 1A68     		ldr	r2, [r3]
 2562 006c 42F02402 		orr	r2, r2, #36
 2563 0070 1A60     		str	r2, [r3]
1822:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Flush FIFO */
1823:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_CRYP_FIFO_FLUSH(hcryp);
 2564              		.loc 1 1823 0
 2565 0072 1A68     		ldr	r2, [r3]
 2566 0074 42F48042 		orr	r2, r2, #16384
 2567 0078 1A60     		str	r2, [r3]
1824:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1825:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Enable CRYP */
1826:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     __HAL_CRYP_ENABLE(hcryp);
 2568              		.loc 1 1826 0
 2569 007a 1A68     		ldr	r2, [r3]
 2570 007c 42F40042 		orr	r2, r2, #32768
 2571 0080 1A60     		str	r2, [r3]
1827:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1828:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Set the phase */
1829:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     hcryp->Phase = HAL_CRYP_PHASE_PROCESS;
 2572              		.loc 1 1829 0
 2573 0082 0223     		movs	r3, #2
 2574 0084 84F83130 		strb	r3, [r4, #49]
 2575              	.L264:
1830:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   }
1831:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     
1832:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     /* Write Plain Data and Get Cypher Data */
1833:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     if(CRYP_ProcessData(hcryp, pCypherData, Size, pPlainData, Timeout) != HAL_OK)
 2576              		.loc 1 1833 0
 2577 0088 0095     		str	r5, [sp]
 2578 008a 4346     		mov	r3, r8
 2579 008c 3A46     		mov	r2, r7
 2580 008e 3146     		mov	r1, r6
 2581 0090 2046     		mov	r0, r4
 2582 0092 FFF7FEFF 		bl	CRYP_ProcessData
 2583              	.LVL270:
 2584 0096 C8B9     		cbnz	r0, .L271
1834:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     {
1835:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       return HAL_TIMEOUT;
1836:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
1837:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1838:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Change the CRYP state */
1839:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   hcryp->State = HAL_CRYP_STATE_READY;
 2585              		.loc 1 1839 0
 2586 0098 0123     		movs	r3, #1
 2587 009a 84F83D30 		strb	r3, [r4, #61]
1840:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1841:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Process Unlocked */
1842:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   __HAL_UNLOCK(hcryp);
 2588              		.loc 1 1842 0
 2589 009e 84F83C00 		strb	r0, [r4, #60]
1843:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
1844:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   /* Return function status */
1845:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   return HAL_OK;
 2590              		.loc 1 1845 0
 2591 00a2 08E0     		b	.L263
 2592              	.LVL271:
 2593              	.L269:
1799:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****       {
 2594              		.loc 1 1799 0
 2595 00a4 681C     		adds	r0, r5, #1
 2596 00a6 D2D0     		beq	.L266
1801:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 2597              		.loc 1 1801 0
 2598 00a8 45B9     		cbnz	r5, .L267
 2599              	.L268:
1804:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           
 2600              		.loc 1 1804 0
 2601 00aa 0320     		movs	r0, #3
1807:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         
 2602              		.loc 1 1807 0
 2603 00ac 0023     		movs	r3, #0
1804:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****           
 2604              		.loc 1 1804 0
 2605 00ae 84F83D00 		strb	r0, [r4, #61]
1807:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         
 2606              		.loc 1 1807 0
 2607 00b2 84F83C30 		strb	r3, [r4, #60]
 2608              	.LVL272:
 2609              	.L263:
1846:.././hal/stm32f4/stm32f4_hal_lowlevel.c **** }
 2610              		.loc 1 1846 0
 2611 00b6 02B0     		add	sp, sp, #8
 2612              	.LCFI15:
 2613              		.cfi_remember_state
 2614              		.cfi_def_cfa_offset 24
 2615              		@ sp needed
 2616 00b8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2617              	.LVL273:
 2618              	.L267:
 2619              	.LCFI16:
 2620              		.cfi_restore_state
1801:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****         {
 2621              		.loc 1 1801 0 discriminator 1
 2622 00bc FFF7FEFF 		bl	HAL_GetTick
 2623              	.LVL274:
 2624 00c0 401A     		subs	r0, r0, r1
 2625 00c2 8542     		cmp	r5, r0
 2626 00c4 C2D2     		bcs	.L265
 2627 00c6 F0E7     		b	.L268
 2628              	.LVL275:
 2629              	.L270:
1776:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****   
 2630              		.loc 1 1776 0
 2631 00c8 1846     		mov	r0, r3
 2632              	.LVL276:
 2633 00ca F4E7     		b	.L263
 2634              	.LVL277:
 2635              	.L271:
1835:.././hal/stm32f4/stm32f4_hal_lowlevel.c ****     }
 2636              		.loc 1 1835 0
 2637 00cc 0320     		movs	r0, #3
 2638 00ce F2E7     		b	.L263
 2639              	.L275:
 2640              		.align	2
 2641              	.L274:
 2642 00d0 00000650 		.word	1342570496
 2643              		.cfi_endproc
 2644              	.LFE142:
 2646              		.bss
 2647              		.align	2
 2648              		.set	.LANCHOR0,. + 0
 2651              	tick.8401:
 2652 0000 00000000 		.space	4
 2653              		.text
 2654              	.Letext0:
 2655              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2656              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2657              		.file 5 ".././hal/stm32f4/CMSIS/core/core_cm4.h"
 2658              		.file 6 ".././hal/stm32f4/CMSIS/device/system_stm32f4xx.h"
 2659              		.file 7 ".././hal/stm32f4/CMSIS/device/stm32f415xx.h"
 2660              		.file 8 ".././hal/stm32f4/CMSIS/device/stm32f4xx.h"
 2661              		.file 9 "/usr/include/newlib/sys/lock.h"
 2662              		.file 10 "/usr/include/newlib/sys/_types.h"
 2663              		.file 11 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2664              		.file 12 "/usr/include/newlib/sys/reent.h"
 2665              		.file 13 ".././hal/stm32f4/stm32f4xx_hal_def.h"
 2666              		.file 14 ".././hal/stm32f4/stm32f4xx_hal_rcc_ex.h"
 2667              		.file 15 ".././hal/stm32f4/stm32f4xx_hal_rcc.h"
 2668              		.file 16 ".././hal/stm32f4/stm32f4xx_hal_gpio.h"
 2669              		.file 17 ".././hal/stm32f4/stm32f4xx_hal_dma.h"
 2670              		.file 18 ".././hal/stm32f4/stm32f4xx_hal_uart.h"
 2671              		.file 19 ".././hal/stm32f4/stm32f4xx_hal_cryp.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4_hal_lowlevel.c
     /tmp/ccdrPI9a.s:18     .text.CRYP_SetKey:0000000000000000 $t
     /tmp/ccdrPI9a.s:24     .text.CRYP_SetKey:0000000000000000 CRYP_SetKey
     /tmp/ccdrPI9a.s:270    .text.HAL_GetTick:0000000000000000 $t
     /tmp/ccdrPI9a.s:277    .text.HAL_GetTick:0000000000000000 HAL_GetTick
     /tmp/ccdrPI9a.s:294    .text.HAL_GetTick:000000000000000c $d
     /tmp/ccdrPI9a.s:299    .text.CRYP_ProcessData:0000000000000000 $t
     /tmp/ccdrPI9a.s:305    .text.CRYP_ProcessData:0000000000000000 CRYP_ProcessData
     /tmp/ccdrPI9a.s:425    .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccdrPI9a.s:432    .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
     /tmp/ccdrPI9a.s:460    .text.RCC_AHB2PeriphClockCmd:0000000000000014 $d
     /tmp/ccdrPI9a.s:465    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccdrPI9a.s:472    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccdrPI9a.s:942    .text.HAL_RCC_OscConfig:0000000000000260 $d
     /tmp/ccdrPI9a.s:949    .text.HAL_RCC_OscConfig:0000000000000270 $t
     /tmp/ccdrPI9a.s:1098   .text.HAL_RCC_OscConfig:0000000000000320 $d
     /tmp/ccdrPI9a.s:1104   .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccdrPI9a.s:1111   .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccdrPI9a.s:1340   .text.HAL_RCC_ClockConfig:0000000000000128 $d
     /tmp/ccdrPI9a.s:1346   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccdrPI9a.s:1353   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccdrPI9a.s:1365   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccdrPI9a.s:1372   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccdrPI9a.s:1386   .text.HAL_GPIO_Init:0000000000000000 $t
     /tmp/ccdrPI9a.s:1393   .text.HAL_GPIO_Init:0000000000000000 HAL_GPIO_Init
     /tmp/ccdrPI9a.s:1720   .text.HAL_GPIO_Init:00000000000001b0 $d
     /tmp/ccdrPI9a.s:1728   .text.HAL_GPIO_WritePin:0000000000000000 $t
     /tmp/ccdrPI9a.s:1735   .text.HAL_GPIO_WritePin:0000000000000000 HAL_GPIO_WritePin
     /tmp/ccdrPI9a.s:1759   .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccdrPI9a.s:1766   .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccdrPI9a.s:1954   .text.HAL_UART_Init:00000000000000f4 $d
     /tmp/ccdrPI9a.s:1960   .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccdrPI9a.s:1967   .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccdrPI9a.s:2096   .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccdrPI9a.s:2103   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccdrPI9a.s:2244   .text.HAL_CRYP_Init:0000000000000000 $t
     /tmp/ccdrPI9a.s:2251   .text.HAL_CRYP_Init:0000000000000000 HAL_CRYP_Init
     /tmp/ccdrPI9a.s:2303   .text.HAL_CRYP_Init:0000000000000038 $d
     /tmp/ccdrPI9a.s:2308   .text.HAL_CRYP_DeInit:0000000000000000 $t
     /tmp/ccdrPI9a.s:2315   .text.HAL_CRYP_DeInit:0000000000000000 HAL_CRYP_DeInit
     /tmp/ccdrPI9a.s:2357   .text.HAL_CRYP_AESECB_Encrypt:0000000000000000 $t
     /tmp/ccdrPI9a.s:2364   .text.HAL_CRYP_AESECB_Encrypt:0000000000000000 HAL_CRYP_AESECB_Encrypt
     /tmp/ccdrPI9a.s:2467   .text.HAL_CRYP_AESECB_Decrypt:0000000000000000 $t
     /tmp/ccdrPI9a.s:2474   .text.HAL_CRYP_AESECB_Decrypt:0000000000000000 HAL_CRYP_AESECB_Decrypt
     /tmp/ccdrPI9a.s:2642   .text.HAL_CRYP_AESECB_Decrypt:00000000000000d0 $d
     /tmp/ccdrPI9a.s:2647   .bss:0000000000000000 $d
     /tmp/ccdrPI9a.s:2651   .bss:0000000000000000 tick.8401
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
