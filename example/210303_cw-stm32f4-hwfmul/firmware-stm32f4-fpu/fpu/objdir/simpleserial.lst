   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"simpleserial.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.check_version,"ax",%progbits
  18              		.align	1
  19              		.global	check_version
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	check_version:
  26              	.LFB1:
  27              		.file 1 ".././simpleserial/simpleserial.c"
   1:.././simpleserial/simpleserial.c **** // simpleserial.c
   2:.././simpleserial/simpleserial.c **** 
   3:.././simpleserial/simpleserial.c **** #include "simpleserial.h"
   4:.././simpleserial/simpleserial.c **** #include <stdint.h>
   5:.././simpleserial/simpleserial.c **** #include "hal.h"
   6:.././simpleserial/simpleserial.c **** 
   7:.././simpleserial/simpleserial.c **** 
   8:.././simpleserial/simpleserial.c **** #define MAX_SS_CMDS 16
   9:.././simpleserial/simpleserial.c **** static int num_commands = 0;
  10:.././simpleserial/simpleserial.c **** 
  11:.././simpleserial/simpleserial.c **** #define MAX_SS_LEN 192
  12:.././simpleserial/simpleserial.c **** 
  13:.././simpleserial/simpleserial.c **** //#define SS_VER_1_0 0
  14:.././simpleserial/simpleserial.c **** //#define SS_VER_1_1 1
  15:.././simpleserial/simpleserial.c **** //#define SS_VER_2_0 2
  16:.././simpleserial/simpleserial.c **** 
  17:.././simpleserial/simpleserial.c **** 
  18:.././simpleserial/simpleserial.c **** #define CRC 0xA6
  19:.././simpleserial/simpleserial.c **** uint8_t ss_crc(uint8_t *buf, uint8_t len)
  20:.././simpleserial/simpleserial.c **** {
  21:.././simpleserial/simpleserial.c **** 	unsigned int k = 0;
  22:.././simpleserial/simpleserial.c **** 	uint8_t crc = 0x00;
  23:.././simpleserial/simpleserial.c **** 	while (len--) {
  24:.././simpleserial/simpleserial.c **** 		crc ^= *buf++;
  25:.././simpleserial/simpleserial.c **** 		for (k = 0; k < 8; k++) {
  26:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
  27:.././simpleserial/simpleserial.c **** 		}
  28:.././simpleserial/simpleserial.c **** 	}
  29:.././simpleserial/simpleserial.c **** 	return crc;
  30:.././simpleserial/simpleserial.c **** 
  31:.././simpleserial/simpleserial.c **** }
  32:.././simpleserial/simpleserial.c **** 
  33:.././simpleserial/simpleserial.c **** // [B_STUFF, CMD, SCMD, LEN, B_STUFF, DATA..., CRC, TERM]
  34:.././simpleserial/simpleserial.c **** 
  35:.././simpleserial/simpleserial.c **** //#define SS_VER SS_VER_2_0
  36:.././simpleserial/simpleserial.c **** 
  37:.././simpleserial/simpleserial.c **** #if SS_VER == SS_VER_2_0
  38:.././simpleserial/simpleserial.c **** 
  39:.././simpleserial/simpleserial.c **** void ss_puts(char *x)
  40:.././simpleserial/simpleserial.c **** {
  41:.././simpleserial/simpleserial.c **** 	do {
  42:.././simpleserial/simpleserial.c **** 		putch(*x);
  43:.././simpleserial/simpleserial.c **** 	} while (*++x);
  44:.././simpleserial/simpleserial.c **** }
  45:.././simpleserial/simpleserial.c **** 
  46:.././simpleserial/simpleserial.c **** #define FRAME_BYTE 0x00
  47:.././simpleserial/simpleserial.c **** 
  48:.././simpleserial/simpleserial.c **** uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
  49:.././simpleserial/simpleserial.c **** {
  50:.././simpleserial/simpleserial.c **** 	uint8_t ver = SS_VER;
  51:.././simpleserial/simpleserial.c **** 	simpleserial_put('r', 1, &ver);
  52:.././simpleserial/simpleserial.c **** 	return SS_ERR_OK;
  53:.././simpleserial/simpleserial.c **** }
  54:.././simpleserial/simpleserial.c **** 
  55:.././simpleserial/simpleserial.c **** uint8_t stuff_data(uint8_t *buf, uint8_t len)
  56:.././simpleserial/simpleserial.c **** {
  57:.././simpleserial/simpleserial.c **** 	uint8_t i = 1;
  58:.././simpleserial/simpleserial.c **** 	uint8_t last = 0;
  59:.././simpleserial/simpleserial.c **** 	for (; i < len; i++) {
  60:.././simpleserial/simpleserial.c **** 		if (buf[i] == FRAME_BYTE) {
  61:.././simpleserial/simpleserial.c **** 			buf[last] = i - last;
  62:.././simpleserial/simpleserial.c **** 			last = i;
  63:.././simpleserial/simpleserial.c **** 		}
  64:.././simpleserial/simpleserial.c **** 	}
  65:.././simpleserial/simpleserial.c **** 	return 0x00;
  66:.././simpleserial/simpleserial.c **** }
  67:.././simpleserial/simpleserial.c **** 
  68:.././simpleserial/simpleserial.c **** uint8_t unstuff_data(uint8_t *buf, uint8_t len)
  69:.././simpleserial/simpleserial.c **** {
  70:.././simpleserial/simpleserial.c **** 	uint8_t next = buf[0];
  71:.././simpleserial/simpleserial.c **** 	buf[0] = 0x00;
  72:.././simpleserial/simpleserial.c **** 	//len -= 1;
  73:.././simpleserial/simpleserial.c **** 	uint8_t tmp = next;
  74:.././simpleserial/simpleserial.c **** 	while ((next < len) && tmp != 0) {
  75:.././simpleserial/simpleserial.c **** 		tmp = buf[next];
  76:.././simpleserial/simpleserial.c **** 		buf[next] = FRAME_BYTE;
  77:.././simpleserial/simpleserial.c **** 		next += tmp;
  78:.././simpleserial/simpleserial.c **** 	}
  79:.././simpleserial/simpleserial.c **** 	return next;
  80:.././simpleserial/simpleserial.c **** }
  81:.././simpleserial/simpleserial.c **** 
  82:.././simpleserial/simpleserial.c **** // Set up the SimpleSerial module by preparing internal commands
  83:.././simpleserial/simpleserial.c **** // This just adds the "v" command for now...
  84:.././simpleserial/simpleserial.c **** void simpleserial_init()
  85:.././simpleserial/simpleserial.c **** {
  86:.././simpleserial/simpleserial.c **** 	//simpleserial_addcmd('v', 0, check_version);
  87:.././simpleserial/simpleserial.c **** }
  88:.././simpleserial/simpleserial.c **** 
  89:.././simpleserial/simpleserial.c **** typedef struct ss_cmd
  90:.././simpleserial/simpleserial.c **** {
  91:.././simpleserial/simpleserial.c **** 	char c;
  92:.././simpleserial/simpleserial.c **** 	unsigned int len;
  93:.././simpleserial/simpleserial.c **** 	uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t *);
  94:.././simpleserial/simpleserial.c **** } ss_cmd;
  95:.././simpleserial/simpleserial.c **** static ss_cmd commands[MAX_SS_CMDS];
  96:.././simpleserial/simpleserial.c **** 
  97:.././simpleserial/simpleserial.c **** int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*
  98:.././simpleserial/simpleserial.c **** {
  99:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS) {
 100:.././simpleserial/simpleserial.c **** 		putch('a');
 101:.././simpleserial/simpleserial.c **** 		return 1;
 102:.././simpleserial/simpleserial.c **** 	}
 103:.././simpleserial/simpleserial.c **** 
 104:.././simpleserial/simpleserial.c **** 	if(len >= MAX_SS_LEN) {
 105:.././simpleserial/simpleserial.c **** 		putch('b');
 106:.././simpleserial/simpleserial.c **** 		return 1;
 107:.././simpleserial/simpleserial.c **** 	}
 108:.././simpleserial/simpleserial.c **** 
 109:.././simpleserial/simpleserial.c **** 	commands[num_commands].c   = c;
 110:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 111:.././simpleserial/simpleserial.c **** 	commands[num_commands].fp  = fp;
 112:.././simpleserial/simpleserial.c **** 	num_commands++;
 113:.././simpleserial/simpleserial.c **** 
 114:.././simpleserial/simpleserial.c **** 	return 0;
 115:.././simpleserial/simpleserial.c **** }
 116:.././simpleserial/simpleserial.c **** 
 117:.././simpleserial/simpleserial.c **** void simpleserial_get(void)
 118:.././simpleserial/simpleserial.c **** {
 119:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 120:.././simpleserial/simpleserial.c **** 	uint8_t err = 0;
 121:.././simpleserial/simpleserial.c **** 
 122:.././simpleserial/simpleserial.c **** 	for (int i = 0; i < 4; i++) {
 123:.././simpleserial/simpleserial.c **** 		data_buf[i] = getch(); //PTR, cmd, scmd, len
 124:.././simpleserial/simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 125:.././simpleserial/simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 126:.././simpleserial/simpleserial.c **** 			goto ERROR;
 127:.././simpleserial/simpleserial.c **** 		}
 128:.././simpleserial/simpleserial.c **** 	}
 129:.././simpleserial/simpleserial.c **** 	uint8_t next_frame = unstuff_data(data_buf, 4);
 130:.././simpleserial/simpleserial.c **** 
 131:.././simpleserial/simpleserial.c **** 	// check for valid command
 132:.././simpleserial/simpleserial.c **** 	uint8_t c = 0; 
 133:.././simpleserial/simpleserial.c **** 	for(c = 0; c < num_commands; c++)
 134:.././simpleserial/simpleserial.c **** 	{
 135:.././simpleserial/simpleserial.c **** 		if(commands[c].c == data_buf[1])
 136:.././simpleserial/simpleserial.c **** 			break;
 137:.././simpleserial/simpleserial.c **** 	}
 138:.././simpleserial/simpleserial.c **** 
 139:.././simpleserial/simpleserial.c **** 	if (c == num_commands) {
 140:.././simpleserial/simpleserial.c **** 		err = SS_ERR_CMD;
 141:.././simpleserial/simpleserial.c **** 		goto ERROR;
 142:.././simpleserial/simpleserial.c **** 	}
 143:.././simpleserial/simpleserial.c **** 
 144:.././simpleserial/simpleserial.c **** 	//check that next frame not beyond end of message
 145:.././simpleserial/simpleserial.c **** 	// account for cmd, scmd, len, data, crc, end of frame
 146:.././simpleserial/simpleserial.c **** 	if ((data_buf[3] + 5) < next_frame) {
 147:.././simpleserial/simpleserial.c **** 		err = SS_ERR_LEN;
 148:.././simpleserial/simpleserial.c **** 		goto ERROR;
 149:.././simpleserial/simpleserial.c **** 	}
 150:.././simpleserial/simpleserial.c **** 
 151:.././simpleserial/simpleserial.c **** 	// read in data
 152:.././simpleserial/simpleserial.c **** 	// eq to len + crc + frame end
 153:.././simpleserial/simpleserial.c **** 	int i = 4;
 154:.././simpleserial/simpleserial.c **** 	for (; i < data_buf[3] + 5; i++) {
 155:.././simpleserial/simpleserial.c **** 		data_buf[i] = getch();
 156:.././simpleserial/simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 157:.././simpleserial/simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 158:.././simpleserial/simpleserial.c **** 			goto ERROR;
 159:.././simpleserial/simpleserial.c **** 		}
 160:.././simpleserial/simpleserial.c **** 	}
 161:.././simpleserial/simpleserial.c **** 
 162:.././simpleserial/simpleserial.c **** 	//check that final byte is the FRAME_BYTE
 163:.././simpleserial/simpleserial.c **** 	data_buf[i] = getch();
 164:.././simpleserial/simpleserial.c **** 	if (data_buf[i] != FRAME_BYTE) {
 165:.././simpleserial/simpleserial.c **** 		err = SS_ERR_LEN;
 166:.././simpleserial/simpleserial.c **** 		goto ERROR;
 167:.././simpleserial/simpleserial.c **** 	}
 168:.././simpleserial/simpleserial.c **** 
 169:.././simpleserial/simpleserial.c **** 	//fully unstuff data now
 170:.././simpleserial/simpleserial.c **** 	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 171:.././simpleserial/simpleserial.c **** 
 172:.././simpleserial/simpleserial.c **** 	//calc crc excluding original frame offset and frame end and crc
 173:.././simpleserial/simpleserial.c **** 	uint8_t crc = ss_crc(data_buf+1, i-2);
 174:.././simpleserial/simpleserial.c **** 	if (crc != data_buf[i-1]) {
 175:.././simpleserial/simpleserial.c **** 		err = SS_ERR_CRC;
 176:.././simpleserial/simpleserial.c **** 		goto ERROR;
 177:.././simpleserial/simpleserial.c **** 	}
 178:.././simpleserial/simpleserial.c **** 
 179:.././simpleserial/simpleserial.c **** 	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 180:.././simpleserial/simpleserial.c **** 
 181:.././simpleserial/simpleserial.c **** ERROR:
 182:.././simpleserial/simpleserial.c **** 	simpleserial_put('e', 0x01, &err);
 183:.././simpleserial/simpleserial.c **** 	return;
 184:.././simpleserial/simpleserial.c **** }
 185:.././simpleserial/simpleserial.c **** 
 186:.././simpleserial/simpleserial.c **** void simpleserial_put(char c, uint8_t size, uint8_t* output)
 187:.././simpleserial/simpleserial.c **** {
 188:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 189:.././simpleserial/simpleserial.c **** 	data_buf[0] = 0x00;
 190:.././simpleserial/simpleserial.c **** 	data_buf[1] = c;
 191:.././simpleserial/simpleserial.c **** 	data_buf[2] = size;
 192:.././simpleserial/simpleserial.c **** 	int i = 0;
 193:.././simpleserial/simpleserial.c **** 	for (; i < size; i++) {
 194:.././simpleserial/simpleserial.c **** 		data_buf[i + 3] = output[i];
 195:.././simpleserial/simpleserial.c **** 	}
 196:.././simpleserial/simpleserial.c **** 	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 197:.././simpleserial/simpleserial.c **** 	data_buf[i + 4] = 0x00;
 198:.././simpleserial/simpleserial.c **** 	stuff_data(data_buf, i + 5);
 199:.././simpleserial/simpleserial.c **** 	for (int i = 0; i < size + 5; i++) {
 200:.././simpleserial/simpleserial.c **** 		putch(data_buf[i]);
 201:.././simpleserial/simpleserial.c **** 	}
 202:.././simpleserial/simpleserial.c **** }
 203:.././simpleserial/simpleserial.c **** 
 204:.././simpleserial/simpleserial.c **** 
 205:.././simpleserial/simpleserial.c **** #else
 206:.././simpleserial/simpleserial.c **** 
 207:.././simpleserial/simpleserial.c **** typedef struct ss_cmd
 208:.././simpleserial/simpleserial.c **** {
 209:.././simpleserial/simpleserial.c **** 	char c;
 210:.././simpleserial/simpleserial.c **** 	unsigned int len;
 211:.././simpleserial/simpleserial.c **** 	uint8_t (*fp)(uint8_t*);
 212:.././simpleserial/simpleserial.c **** } ss_cmd;
 213:.././simpleserial/simpleserial.c **** static ss_cmd commands[MAX_SS_CMDS];
 214:.././simpleserial/simpleserial.c **** // Callback function for "v" command.
 215:.././simpleserial/simpleserial.c **** // This can exist in v1.0 as long as we don't actually send back an ack ("z")
 216:.././simpleserial/simpleserial.c **** uint8_t check_version(uint8_t *v)
 217:.././simpleserial/simpleserial.c **** {
  28              		.loc 1 217 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 218:.././simpleserial/simpleserial.c **** 	return SS_VER;
 219:.././simpleserial/simpleserial.c **** }
  34              		.loc 1 219 0
  35 0000 0120     		movs	r0, #1
  36              	.LVL1:
  37 0002 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE1:
  41              		.section	.text.ss_crc,"ax",%progbits
  42              		.align	1
  43              		.global	ss_crc
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  47              		.fpu fpv4-sp-d16
  49              	ss_crc:
  50              	.LFB0:
  20:.././simpleserial/simpleserial.c **** 	unsigned int k = 0;
  51              		.loc 1 20 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              	.LVL2:
  56 0000 10B5     		push	{r4, lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 4, -8
  60              		.cfi_offset 14, -4
  61 0002 0144     		add	r1, r1, r0
  62              	.LVL3:
  22:.././simpleserial/simpleserial.c **** 	while (len--) {
  63              		.loc 1 22 0
  64 0004 0022     		movs	r2, #0
  65              	.LVL4:
  66              	.L3:
  23:.././simpleserial/simpleserial.c **** 		crc ^= *buf++;
  67              		.loc 1 23 0
  68 0006 8842     		cmp	r0, r1
  69 0008 01D1     		bne	.L7
  31:.././simpleserial/simpleserial.c **** 
  70              		.loc 1 31 0
  71 000a 1046     		mov	r0, r2
  72              	.LVL5:
  73 000c 10BD     		pop	{r4, pc}
  74              	.LVL6:
  75              	.L7:
  24:.././simpleserial/simpleserial.c **** 		for (k = 0; k < 8; k++) {
  76              		.loc 1 24 0
  77 000e 10F8013B 		ldrb	r3, [r0], #1	@ zero_extendqisi2
  78              	.LVL7:
  79 0012 5340     		eors	r3, r3, r2
  80 0014 DBB2     		uxtb	r3, r3
  81              	.LVL8:
  82 0016 0824     		movs	r4, #8
  83              	.LVL9:
  84              	.L6:
  26:.././simpleserial/simpleserial.c **** 		}
  85              		.loc 1 26 0
  86 0018 13F0800F 		tst	r3, #128
  87 001c 4FEA4303 		lsl	r3, r3, #1
  88              	.LVL10:
  89 0020 18BF     		it	ne
  90 0022 83F0A603 		eorne	r3, r3, #166
  91 0026 DBB2     		uxtb	r3, r3
  92              	.LVL11:
  25:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
  93              		.loc 1 25 0
  94 0028 013C     		subs	r4, r4, #1
  95              	.LVL12:
  96 002a 1A46     		mov	r2, r3
  97 002c F4D1     		bne	.L6
  98 002e EAE7     		b	.L3
  99              		.cfi_endproc
 100              	.LFE0:
 102              		.section	.text.hex_decode,"ax",%progbits
 103              		.align	1
 104              		.global	hex_decode
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	hex_decode:
 111              	.LFB2:
 220:.././simpleserial/simpleserial.c **** 
 221:.././simpleserial/simpleserial.c **** static char hex_lookup[16] =
 222:.././simpleserial/simpleserial.c **** {
 223:.././simpleserial/simpleserial.c **** 	'0', '1', '2', '3', '4', '5', '6', '7',
 224:.././simpleserial/simpleserial.c **** 	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
 225:.././simpleserial/simpleserial.c **** };
 226:.././simpleserial/simpleserial.c **** 
 227:.././simpleserial/simpleserial.c **** int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
 228:.././simpleserial/simpleserial.c **** {
 112              		.loc 1 228 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              	.LVL13:
 117 0000 70B5     		push	{r4, r5, r6, lr}
 118              	.LCFI1:
 119              		.cfi_def_cfa_offset 16
 120              		.cfi_offset 4, -16
 121              		.cfi_offset 5, -12
 122              		.cfi_offset 6, -8
 123              		.cfi_offset 14, -4
 124 0002 0131     		adds	r1, r1, #1
 125              	.LVL14:
 126              	.LBB2:
 229:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < len; i++)
 127              		.loc 1 229 0
 128 0004 1346     		mov	r3, r2
 129              	.LVL15:
 130              	.L10:
 131              		.loc 1 229 0 is_stmt 0 discriminator 1
 132 0006 9C1A     		subs	r4, r3, r2
 133 0008 A042     		cmp	r0, r4
 134 000a 01DC     		bgt	.L20
 135              	.LBE2:
 230:.././simpleserial/simpleserial.c **** 	{
 231:.././simpleserial/simpleserial.c **** 		char n_hi = ascii_buf[2*i];
 232:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
 233:.././simpleserial/simpleserial.c **** 
 234:.././simpleserial/simpleserial.c **** 		if(n_lo >= '0' && n_lo <= '9')
 235:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
 236:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
 237:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
 238:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
 239:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 240:.././simpleserial/simpleserial.c **** 		else
 241:.././simpleserial/simpleserial.c **** 			return 1;
 242:.././simpleserial/simpleserial.c **** 
 243:.././simpleserial/simpleserial.c **** 		if(n_hi >= '0' && n_hi <= '9')
 244:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 245:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
 246:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 247:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 248:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 249:.././simpleserial/simpleserial.c **** 		else
 250:.././simpleserial/simpleserial.c **** 			return 1;
 251:.././simpleserial/simpleserial.c **** 	}
 252:.././simpleserial/simpleserial.c **** 
 253:.././simpleserial/simpleserial.c **** 	return 0;
 136              		.loc 1 253 0 is_stmt 1
 137 000c 0020     		movs	r0, #0
 138              	.LVL16:
 254:.././simpleserial/simpleserial.c **** }
 139              		.loc 1 254 0
 140 000e 70BD     		pop	{r4, r5, r6, pc}
 141              	.LVL17:
 142              	.L20:
 143              	.LBB4:
 144              	.LBB3:
 232:.././simpleserial/simpleserial.c **** 
 145              		.loc 1 232 0
 146 0010 0D78     		ldrb	r5, [r1]	@ zero_extendqisi2
 231:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
 147              		.loc 1 231 0
 148 0012 11F8014C 		ldrb	r4, [r1, #-1]	@ zero_extendqisi2
 149              	.LVL18:
 234:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
 150              		.loc 1 234 0
 151 0016 A5F13006 		sub	r6, r5, #48
 152 001a F6B2     		uxtb	r6, r6
 153 001c 092E     		cmp	r6, #9
 154 001e 0CD8     		bhi	.L11
 235:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
 155              		.loc 1 235 0
 156 0020 1E70     		strb	r6, [r3]
 157              	.LVL19:
 158              	.L12:
 243:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 159              		.loc 1 243 0
 160 0022 A4F13005 		sub	r5, r4, #48
 161 0026 EEB2     		uxtb	r6, r5
 162 0028 092E     		cmp	r6, #9
 163 002a 15D8     		bhi	.L16
 164              	.L23:
 246:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 165              		.loc 1 246 0
 166 002c 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 167              	.LVL20:
 168 002e 44EA0514 		orr	r4, r4, r5, lsl #4
 169              	.L22:
 248:.././simpleserial/simpleserial.c **** 		else
 170              		.loc 1 248 0
 171 0032 1C70     		strb	r4, [r3]
 172              	.LVL21:
 173 0034 0231     		adds	r1, r1, #2
 174 0036 0133     		adds	r3, r3, #1
 175              	.LVL22:
 176 0038 E5E7     		b	.L10
 177              	.LVL23:
 178              	.L11:
 236:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
 179              		.loc 1 236 0
 180 003a A5F14106 		sub	r6, r5, #65
 181 003e 052E     		cmp	r6, #5
 182 0040 02D8     		bhi	.L13
 237:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
 183              		.loc 1 237 0
 184 0042 373D     		subs	r5, r5, #55
 185              	.LVL24:
 186              	.L21:
 239:.././simpleserial/simpleserial.c **** 		else
 187              		.loc 1 239 0
 188 0044 1D70     		strb	r5, [r3]
 189              	.LVL25:
 190 0046 ECE7     		b	.L12
 191              	.LVL26:
 192              	.L13:
 238:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 193              		.loc 1 238 0
 194 0048 A5F16106 		sub	r6, r5, #97
 195 004c 052E     		cmp	r6, #5
 196 004e 01D9     		bls	.L14
 197              	.LVL27:
 198              	.L19:
 241:.././simpleserial/simpleserial.c **** 
 199              		.loc 1 241 0
 200 0050 0120     		movs	r0, #1
 201              	.LVL28:
 202 0052 70BD     		pop	{r4, r5, r6, pc}
 203              	.LVL29:
 204              	.L14:
 239:.././simpleserial/simpleserial.c **** 		else
 205              		.loc 1 239 0
 206 0054 573D     		subs	r5, r5, #87
 207              	.LVL30:
 208 0056 F5E7     		b	.L21
 209              	.LVL31:
 210              	.L16:
 245:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 211              		.loc 1 245 0
 212 0058 A4F14105 		sub	r5, r4, #65
 213 005c 052D     		cmp	r5, #5
 214 005e 02D8     		bhi	.L18
 246:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 215              		.loc 1 246 0
 216 0060 A4F13705 		sub	r5, r4, #55
 217 0064 E2E7     		b	.L23
 218              	.L18:
 247:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 219              		.loc 1 247 0
 220 0066 A4F16105 		sub	r5, r4, #97
 221 006a 052D     		cmp	r5, #5
 222 006c F0D8     		bhi	.L19
 248:.././simpleserial/simpleserial.c **** 		else
 223              		.loc 1 248 0
 224 006e 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 225 0070 573C     		subs	r4, r4, #87
 226              	.LVL32:
 227 0072 45EA0414 		orr	r4, r5, r4, lsl #4
 228              	.LVL33:
 229 0076 DCE7     		b	.L22
 230              	.LBE3:
 231              	.LBE4:
 232              		.cfi_endproc
 233              	.LFE2:
 235              		.section	.text.simpleserial_addcmd,"ax",%progbits
 236              		.align	1
 237              		.global	simpleserial_addcmd
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu fpv4-sp-d16
 243              	simpleserial_addcmd:
 244              	.LFB4:
 255:.././simpleserial/simpleserial.c **** 
 256:.././simpleserial/simpleserial.c **** 
 257:.././simpleserial/simpleserial.c **** // Set up the SimpleSerial module by preparing internal commands
 258:.././simpleserial/simpleserial.c **** // This just adds the "v" command for now...
 259:.././simpleserial/simpleserial.c **** void simpleserial_init()
 260:.././simpleserial/simpleserial.c **** {
 261:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 262:.././simpleserial/simpleserial.c **** }
 263:.././simpleserial/simpleserial.c **** 
 264:.././simpleserial/simpleserial.c **** int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
 265:.././simpleserial/simpleserial.c **** {
 245              		.loc 1 265 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              	.LVL34:
 250 0000 30B5     		push	{r4, r5, lr}
 251              	.LCFI2:
 252              		.cfi_def_cfa_offset 12
 253              		.cfi_offset 4, -12
 254              		.cfi_offset 5, -8
 255              		.cfi_offset 14, -4
 266:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS)
 256              		.loc 1 266 0
 257 0002 094D     		ldr	r5, .L28
 258 0004 2B68     		ldr	r3, [r5]
 259 0006 0F2B     		cmp	r3, #15
 260 0008 0BDC     		bgt	.L27
 267:.././simpleserial/simpleserial.c **** 		return 1;
 268:.././simpleserial/simpleserial.c **** 
 269:.././simpleserial/simpleserial.c **** 	if(len >= MAX_SS_LEN)
 261              		.loc 1 269 0
 262 000a BF29     		cmp	r1, #191
 263 000c 09D8     		bhi	.L27
 270:.././simpleserial/simpleserial.c **** 		return 1;
 271:.././simpleserial/simpleserial.c **** 
 272:.././simpleserial/simpleserial.c **** 	commands[num_commands].c   = c;
 264              		.loc 1 272 0
 265 000e 0C24     		movs	r4, #12
 266 0010 04FB0354 		mla	r4, r4, r3, r5
 273:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 274:.././simpleserial/simpleserial.c **** 	commands[num_commands].fp  = fp;
 275:.././simpleserial/simpleserial.c **** 	num_commands++;
 267              		.loc 1 275 0
 268 0014 0133     		adds	r3, r3, #1
 272:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 269              		.loc 1 272 0
 270 0016 2071     		strb	r0, [r4, #4]
 273:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 271              		.loc 1 273 0
 272 0018 A160     		str	r1, [r4, #8]
 274:.././simpleserial/simpleserial.c **** 	num_commands++;
 273              		.loc 1 274 0
 274 001a E260     		str	r2, [r4, #12]
 275              		.loc 1 275 0
 276 001c 2B60     		str	r3, [r5]
 276:.././simpleserial/simpleserial.c **** 
 277:.././simpleserial/simpleserial.c **** 	return 0;
 277              		.loc 1 277 0
 278 001e 0020     		movs	r0, #0
 279              	.LVL35:
 280 0020 30BD     		pop	{r4, r5, pc}
 281              	.LVL36:
 282              	.L27:
 267:.././simpleserial/simpleserial.c **** 
 283              		.loc 1 267 0
 284 0022 0120     		movs	r0, #1
 285              	.LVL37:
 278:.././simpleserial/simpleserial.c **** }
 286              		.loc 1 278 0
 287 0024 30BD     		pop	{r4, r5, pc}
 288              	.L29:
 289 0026 00BF     		.align	2
 290              	.L28:
 291 0028 00000000 		.word	.LANCHOR0
 292              		.cfi_endproc
 293              	.LFE4:
 295              		.section	.text.simpleserial_init,"ax",%progbits
 296              		.align	1
 297              		.global	simpleserial_init
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu fpv4-sp-d16
 303              	simpleserial_init:
 304              	.LFB3:
 260:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 305              		.loc 1 260 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 261:.././simpleserial/simpleserial.c **** }
 310              		.loc 1 261 0
 311 0000 024A     		ldr	r2, .L31
 312 0002 0021     		movs	r1, #0
 313 0004 7620     		movs	r0, #118
 314 0006 FFF7FEBF 		b	simpleserial_addcmd
 315              	.LVL38:
 316              	.L32:
 317 000a 00BF     		.align	2
 318              	.L31:
 319 000c 00000000 		.word	check_version
 320              		.cfi_endproc
 321              	.LFE3:
 323              		.section	.text.simpleserial_put,"ax",%progbits
 324              		.align	1
 325              		.global	simpleserial_put
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu fpv4-sp-d16
 331              	simpleserial_put:
 332              	.LFB6:
 279:.././simpleserial/simpleserial.c **** 
 280:.././simpleserial/simpleserial.c **** void simpleserial_get(void)
 281:.././simpleserial/simpleserial.c **** {
 282:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 283:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 284:.././simpleserial/simpleserial.c **** 	char c;
 285:.././simpleserial/simpleserial.c **** 
 286:.././simpleserial/simpleserial.c **** 	// Find which command we're receiving
 287:.././simpleserial/simpleserial.c **** 	c = getch();
 288:.././simpleserial/simpleserial.c **** 
 289:.././simpleserial/simpleserial.c **** 	int cmd;
 290:.././simpleserial/simpleserial.c **** 	for(cmd = 0; cmd < num_commands; cmd++)
 291:.././simpleserial/simpleserial.c **** 	{
 292:.././simpleserial/simpleserial.c **** 		if(commands[cmd].c == c)
 293:.././simpleserial/simpleserial.c **** 			break;
 294:.././simpleserial/simpleserial.c **** 	}
 295:.././simpleserial/simpleserial.c **** 
 296:.././simpleserial/simpleserial.c **** 	// If we didn't find a match, give up right away
 297:.././simpleserial/simpleserial.c **** 	if(cmd == num_commands)
 298:.././simpleserial/simpleserial.c **** 		return;
 299:.././simpleserial/simpleserial.c **** 
 300:.././simpleserial/simpleserial.c **** 	// Receive characters until we fill the ASCII buffer
 301:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < 2*commands[cmd].len; i++)
 302:.././simpleserial/simpleserial.c **** 	{
 303:.././simpleserial/simpleserial.c **** 		c = getch();
 304:.././simpleserial/simpleserial.c **** 
 305:.././simpleserial/simpleserial.c **** 		// Check for early \n
 306:.././simpleserial/simpleserial.c **** 		if(c == '\n' || c == '\r')
 307:.././simpleserial/simpleserial.c **** 			return;
 308:.././simpleserial/simpleserial.c **** 
 309:.././simpleserial/simpleserial.c **** 		ascii_buf[i] = c;
 310:.././simpleserial/simpleserial.c **** 	}
 311:.././simpleserial/simpleserial.c **** 
 312:.././simpleserial/simpleserial.c **** 	// Assert that last character is \n or \r
 313:.././simpleserial/simpleserial.c **** 	c = getch();
 314:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 315:.././simpleserial/simpleserial.c **** 		return;
 316:.././simpleserial/simpleserial.c **** 
 317:.././simpleserial/simpleserial.c **** 	// ASCII buffer is full: convert to bytes 
 318:.././simpleserial/simpleserial.c **** 	// Check for illegal characters here
 319:.././simpleserial/simpleserial.c **** 	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 320:.././simpleserial/simpleserial.c **** 		return;
 321:.././simpleserial/simpleserial.c **** 
 322:.././simpleserial/simpleserial.c **** 	// Callback
 323:.././simpleserial/simpleserial.c **** 	uint8_t ret[1];
 324:.././simpleserial/simpleserial.c **** 	ret[0] = commands[cmd].fp(data_buf);
 325:.././simpleserial/simpleserial.c **** 	
 326:.././simpleserial/simpleserial.c **** 	// Acknowledge (if version is 1.1)
 327:.././simpleserial/simpleserial.c **** #if SS_VER == SS_VER_1_1
 328:.././simpleserial/simpleserial.c **** 	simpleserial_put('z', 1, ret);
 329:.././simpleserial/simpleserial.c **** #endif
 330:.././simpleserial/simpleserial.c **** }
 331:.././simpleserial/simpleserial.c **** 
 332:.././simpleserial/simpleserial.c **** void simpleserial_put(char c, uint8_t size, uint8_t* output)
 333:.././simpleserial/simpleserial.c **** {
 333              		.loc 1 333 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337              	.LVL39:
 338 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 339              	.LCFI3:
 340              		.cfi_def_cfa_offset 24
 341              		.cfi_offset 4, -24
 342              		.cfi_offset 5, -20
 343              		.cfi_offset 6, -16
 344              		.cfi_offset 7, -12
 345              		.cfi_offset 8, -8
 346              		.cfi_offset 14, -4
 347              		.loc 1 333 0
 348 0004 1546     		mov	r5, r2
 349 0006 0F46     		mov	r7, r1
 334:.././simpleserial/simpleserial.c **** 	// Write first character
 335:.././simpleserial/simpleserial.c **** 	putch(c);
 350              		.loc 1 335 0
 351 0008 FFF7FEFF 		bl	putch
 352              	.LVL40:
 353              	.LBB5:
 336:.././simpleserial/simpleserial.c **** 
 337:.././simpleserial/simpleserial.c **** 	// Write each byte as two nibbles
 338:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < size; i++)
 339:.././simpleserial/simpleserial.c **** 	{
 340:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] >> 4 ]);
 354              		.loc 1 340 0
 355 000c 0C4E     		ldr	r6, .L36
 338:.././simpleserial/simpleserial.c **** 	{
 356              		.loc 1 338 0
 357 000e 2C46     		mov	r4, r5
 358              	.LVL41:
 359              	.L34:
 338:.././simpleserial/simpleserial.c **** 	{
 360              		.loc 1 338 0 is_stmt 0 discriminator 1
 361 0010 631B     		subs	r3, r4, r5
 362 0012 9F42     		cmp	r7, r3
 363 0014 04DC     		bgt	.L35
 364              	.LBE5:
 341:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 342:.././simpleserial/simpleserial.c **** 	}
 343:.././simpleserial/simpleserial.c **** 
 344:.././simpleserial/simpleserial.c **** 	// Write trailing '\n'
 345:.././simpleserial/simpleserial.c **** 	putch('\n');
 365              		.loc 1 345 0 is_stmt 1
 366 0016 0A20     		movs	r0, #10
 346:.././simpleserial/simpleserial.c **** }
 367              		.loc 1 346 0
 368 0018 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 369              	.LCFI4:
 370              		.cfi_remember_state
 371              		.cfi_restore 14
 372              		.cfi_restore 8
 373              		.cfi_restore 7
 374              		.cfi_restore 6
 375              		.cfi_restore 5
 376              		.cfi_restore 4
 377              		.cfi_def_cfa_offset 0
 378              	.LVL42:
 345:.././simpleserial/simpleserial.c **** }
 379              		.loc 1 345 0
 380 001c FFF7FEBF 		b	putch
 381              	.LVL43:
 382              	.L35:
 383              	.LCFI5:
 384              		.cfi_restore_state
 385 0020 A046     		mov	r8, r4
 386              	.LBB6:
 340:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 387              		.loc 1 340 0 discriminator 3
 388 0022 14F8013B 		ldrb	r3, [r4], #1	@ zero_extendqisi2
 389              	.LVL44:
 390 0026 1B09     		lsrs	r3, r3, #4
 391 0028 F05C     		ldrb	r0, [r6, r3]	@ zero_extendqisi2
 392 002a FFF7FEFF 		bl	putch
 393              	.LVL45:
 341:.././simpleserial/simpleserial.c **** 	}
 394              		.loc 1 341 0 discriminator 3
 395 002e 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
 396 0032 03F00F03 		and	r3, r3, #15
 397 0036 F05C     		ldrb	r0, [r6, r3]	@ zero_extendqisi2
 398 0038 FFF7FEFF 		bl	putch
 399              	.LVL46:
 400 003c E8E7     		b	.L34
 401              	.L37:
 402 003e 00BF     		.align	2
 403              	.L36:
 404 0040 00000000 		.word	.LANCHOR1
 405              	.LBE6:
 406              		.cfi_endproc
 407              	.LFE6:
 409              		.section	.text.simpleserial_get,"ax",%progbits
 410              		.align	1
 411              		.global	simpleserial_get
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 415              		.fpu fpv4-sp-d16
 417              	simpleserial_get:
 418              	.LFB5:
 281:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 419              		.loc 1 281 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 584
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 424              	.LCFI6:
 425              		.cfi_def_cfa_offset 24
 426              		.cfi_offset 4, -24
 427              		.cfi_offset 5, -20
 428              		.cfi_offset 6, -16
 429              		.cfi_offset 7, -12
 430              		.cfi_offset 8, -8
 431              		.cfi_offset 14, -4
 290:.././simpleserial/simpleserial.c **** 	{
 432              		.loc 1 290 0
 433 0004 224D     		ldr	r5, .L58
 281:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 434              		.loc 1 281 0
 435 0006 ADF5127D 		sub	sp, sp, #584
 436              	.LCFI7:
 437              		.cfi_def_cfa_offset 608
 287:.././simpleserial/simpleserial.c **** 
 438              		.loc 1 287 0
 439 000a FFF7FEFF 		bl	getch
 440              	.LVL47:
 290:.././simpleserial/simpleserial.c **** 	{
 441              		.loc 1 290 0
 442 000e 2B68     		ldr	r3, [r5]
 443 0010 0024     		movs	r4, #0
 292:.././simpleserial/simpleserial.c **** 			break;
 444              		.loc 1 292 0
 445 0012 2A1D     		adds	r2, r5, #4
 446 0014 0C21     		movs	r1, #12
 447              	.LVL48:
 448              	.L39:
 290:.././simpleserial/simpleserial.c **** 	{
 449              		.loc 1 290 0 discriminator 1
 450 0016 9C42     		cmp	r4, r3
 451 0018 04DB     		blt	.L42
 297:.././simpleserial/simpleserial.c **** 		return;
 452              		.loc 1 297 0
 453 001a 08D1     		bne	.L57
 454              	.LVL49:
 455              	.L38:
 330:.././simpleserial/simpleserial.c **** 
 456              		.loc 1 330 0
 457 001c 0DF5127D 		add	sp, sp, #584
 458              	.LCFI8:
 459              		.cfi_remember_state
 460              		.cfi_def_cfa_offset 24
 461              		@ sp needed
 462 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 463              	.LVL50:
 464              	.L42:
 465              	.LCFI9:
 466              		.cfi_restore_state
 292:.././simpleserial/simpleserial.c **** 			break;
 467              		.loc 1 292 0
 468 0024 01FB04F6 		mul	r6, r1, r4
 469 0028 B65C     		ldrb	r6, [r6, r2]	@ zero_extendqisi2
 470 002a 8642     		cmp	r6, r0
 471 002c 24D1     		bne	.L40
 472              	.L57:
 473              	.LBB7:
 301:.././simpleserial/simpleserial.c **** 	{
 474              		.loc 1 301 0
 475 002e 0C27     		movs	r7, #12
 476              	.LBE7:
 477 0030 0026     		movs	r6, #0
 478              	.LBB8:
 479 0032 07FB0457 		mla	r7, r7, r4, r5
 309:.././simpleserial/simpleserial.c **** 	}
 480              		.loc 1 309 0
 481 0036 0DF1C808 		add	r8, sp, #200
 482              	.L41:
 483              	.LVL51:
 301:.././simpleserial/simpleserial.c **** 	{
 484              		.loc 1 301 0 discriminator 1
 485 003a BB68     		ldr	r3, [r7, #8]
 486 003c B6EB430F 		cmp	r6, r3, lsl #1
 487 0040 1CD3     		bcc	.L45
 488              	.LBE8:
 313:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 489              		.loc 1 313 0
 490 0042 FFF7FEFF 		bl	getch
 491              	.LVL52:
 314:.././simpleserial/simpleserial.c **** 		return;
 492              		.loc 1 314 0
 493 0046 0A28     		cmp	r0, #10
 494 0048 01D0     		beq	.L46
 314:.././simpleserial/simpleserial.c **** 		return;
 495              		.loc 1 314 0 is_stmt 0 discriminator 1
 496 004a 0D28     		cmp	r0, #13
 497 004c E6D1     		bne	.L38
 498              	.L46:
 319:.././simpleserial/simpleserial.c **** 		return;
 499              		.loc 1 319 0 is_stmt 1
 500 004e 0C23     		movs	r3, #12
 501 0050 03FB0454 		mla	r4, r3, r4, r5
 502              	.LVL53:
 503 0054 02AA     		add	r2, sp, #8
 504 0056 32A9     		add	r1, sp, #200
 505 0058 A068     		ldr	r0, [r4, #8]
 506              	.LVL54:
 507 005a FFF7FEFF 		bl	hex_decode
 508              	.LVL55:
 509 005e 0028     		cmp	r0, #0
 510 0060 DCD1     		bne	.L38
 324:.././simpleserial/simpleserial.c **** 	
 511              		.loc 1 324 0
 512 0062 E368     		ldr	r3, [r4, #12]
 513 0064 02A8     		add	r0, sp, #8
 514 0066 9847     		blx	r3
 515              	.LVL56:
 328:.././simpleserial/simpleserial.c **** #endif
 516              		.loc 1 328 0
 517 0068 01AA     		add	r2, sp, #4
 324:.././simpleserial/simpleserial.c **** 	
 518              		.loc 1 324 0
 519 006a 8DF80400 		strb	r0, [sp, #4]
 328:.././simpleserial/simpleserial.c **** #endif
 520              		.loc 1 328 0
 521 006e 0121     		movs	r1, #1
 522 0070 7A20     		movs	r0, #122
 523 0072 FFF7FEFF 		bl	simpleserial_put
 524              	.LVL57:
 525 0076 D1E7     		b	.L38
 526              	.LVL58:
 527              	.L40:
 290:.././simpleserial/simpleserial.c **** 	{
 528              		.loc 1 290 0 discriminator 2
 529 0078 0134     		adds	r4, r4, #1
 530              	.LVL59:
 531 007a CCE7     		b	.L39
 532              	.LVL60:
 533              	.L45:
 534              	.LBB9:
 303:.././simpleserial/simpleserial.c **** 
 535              		.loc 1 303 0
 536 007c FFF7FEFF 		bl	getch
 537              	.LVL61:
 306:.././simpleserial/simpleserial.c **** 			return;
 538              		.loc 1 306 0
 539 0080 0A28     		cmp	r0, #10
 540 0082 CBD0     		beq	.L38
 306:.././simpleserial/simpleserial.c **** 			return;
 541              		.loc 1 306 0 is_stmt 0 discriminator 1
 542 0084 0D28     		cmp	r0, #13
 543 0086 C9D0     		beq	.L38
 309:.././simpleserial/simpleserial.c **** 	}
 544              		.loc 1 309 0 is_stmt 1 discriminator 2
 545 0088 06F80800 		strb	r0, [r6, r8]
 301:.././simpleserial/simpleserial.c **** 	{
 546              		.loc 1 301 0 discriminator 2
 547 008c 0136     		adds	r6, r6, #1
 548              	.LVL62:
 549 008e D4E7     		b	.L41
 550              	.L59:
 551              		.align	2
 552              	.L58:
 553 0090 00000000 		.word	.LANCHOR0
 554              	.LBE9:
 555              		.cfi_endproc
 556              	.LFE5:
 558              		.section	.rodata
 559              		.set	.LANCHOR1,. + 0
 562              	hex_lookup:
 563 0000 30       		.byte	48
 564 0001 31       		.byte	49
 565 0002 32       		.byte	50
 566 0003 33       		.byte	51
 567 0004 34       		.byte	52
 568 0005 35       		.byte	53
 569 0006 36       		.byte	54
 570 0007 37       		.byte	55
 571 0008 38       		.byte	56
 572 0009 39       		.byte	57
 573 000a 41       		.byte	65
 574 000b 42       		.byte	66
 575 000c 43       		.byte	67
 576 000d 44       		.byte	68
 577 000e 45       		.byte	69
 578 000f 46       		.byte	70
 579              		.bss
 580              		.align	2
 581              		.set	.LANCHOR0,. + 0
 584              	num_commands:
 585 0000 00000000 		.space	4
 588              	commands:
 589 0004 00000000 		.space	192
 589      00000000 
 589      00000000 
 589      00000000 
 589      00000000 
 590              		.text
 591              	.Letext0:
 592              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 593              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 594              		.file 4 ".././hal/stm32f4/stm32f4_hal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 simpleserial.c
     /tmp/cc1fKT0W.s:18     .text.check_version:0000000000000000 $t
     /tmp/cc1fKT0W.s:25     .text.check_version:0000000000000000 check_version
     /tmp/cc1fKT0W.s:42     .text.ss_crc:0000000000000000 $t
     /tmp/cc1fKT0W.s:49     .text.ss_crc:0000000000000000 ss_crc
     /tmp/cc1fKT0W.s:103    .text.hex_decode:0000000000000000 $t
     /tmp/cc1fKT0W.s:110    .text.hex_decode:0000000000000000 hex_decode
     /tmp/cc1fKT0W.s:236    .text.simpleserial_addcmd:0000000000000000 $t
     /tmp/cc1fKT0W.s:243    .text.simpleserial_addcmd:0000000000000000 simpleserial_addcmd
     /tmp/cc1fKT0W.s:291    .text.simpleserial_addcmd:0000000000000028 $d
     /tmp/cc1fKT0W.s:296    .text.simpleserial_init:0000000000000000 $t
     /tmp/cc1fKT0W.s:303    .text.simpleserial_init:0000000000000000 simpleserial_init
     /tmp/cc1fKT0W.s:319    .text.simpleserial_init:000000000000000c $d
     /tmp/cc1fKT0W.s:324    .text.simpleserial_put:0000000000000000 $t
     /tmp/cc1fKT0W.s:331    .text.simpleserial_put:0000000000000000 simpleserial_put
     /tmp/cc1fKT0W.s:404    .text.simpleserial_put:0000000000000040 $d
     /tmp/cc1fKT0W.s:410    .text.simpleserial_get:0000000000000000 $t
     /tmp/cc1fKT0W.s:417    .text.simpleserial_get:0000000000000000 simpleserial_get
     /tmp/cc1fKT0W.s:553    .text.simpleserial_get:0000000000000090 $d
     /tmp/cc1fKT0W.s:562    .rodata:0000000000000000 hex_lookup
     /tmp/cc1fKT0W.s:580    .bss:0000000000000000 $d
     /tmp/cc1fKT0W.s:584    .bss:0000000000000000 num_commands
     /tmp/cc1fKT0W.s:588    .bss:0000000000000004 commands
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
putch
getch
